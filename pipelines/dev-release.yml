
name:  $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)_$(Build.BuildId)

parameters:
- name: lambdautilitystack
  type: string
  default: 'Whetstone-LambdaCustomActions-Dev'
- name: vpcstack
  type: string
  default: 'WhetstoneVpc-Dev'

jobs:
- job: StackDeployments
  displayName: Deploy Stacks
  pool:
   name: AWSBuild
  variables:
    region: 'us-east-1'
    utilitybucket: 'whetstone-utility'
    cfNotificationARN: arn:aws:sns:us-east-1:940085449815:CloudFormationDeployment
    s3keyprefix: '$(Build.BuildNumber)'
    sharedpoliciesstackname: 'WhetstoneSharedPolicies-Dev'    
    keystackname: 'WhetstoneKey-Dev'
    lambdautilitystack: ${{ parameters.lambdautilitystack }}
    cognitostackname: 'Whetstone-Cognito-Dev'
    bucketstackname: 'WhetstoneBucket-Dev'
    databasestackname: 'Whetstone-Aurora-Dev'
    apisecretsstackname: 'Whetstone-APISecrets-Dev'    
    cachetablestackname: 'Whetstone-CacheTable-Dev'
    sessionqueuestackname: 'WhetstoneQueue-Dev'
    messagesenderstackname: 'Whetstone-MessageSender-Dev'
    changesetName: 'Release-$(Build.BuildId)'
    cfDescription: 'Released from AzureDevOps. Release: $(Build.BuildNumber)'
    versiondescription: 'Released from AzureDevOps. Release: $(Build.BuildNumber)'
    bootstrapParamKey: '/storyengine/dev/bootstrap'
    cognitoPool: sonibridge-dev
    vpcstackname:  ${{ parameters.vpcstack }}
    databaseId: db-Z4JLCPHDPWF26RM7DVALNDTS6U
    reportgeneratorstackname: 'Whetstone-ReportGenerator-Dev'
    usertablestackname: 'Whetstone-DynamoDb-Dev'
    socketinfracturestackname: 'Whetstone-SocketInfrastructure-Dev'
    socketapistackname: 'Whetstone-SocketApi-Dev'    
    socketapiauthstackname: 'Whetstone-SocketAuth-Dev'
    sockethandlerstackname: 'Whetstone-SocketHandler-Dev'
    socketnotificationstackname: 'Whetstone-Notifications-Dev'
    sessionauditloggerstackname: 'SessionAuditLogger-Dev'
    googleactionstackname: 'Whetstone-GoogleAction-Dev'
    dynamodbsyncstackname: 'Whetstone-DynamoDbMonitors-Dev'
    dialogflowstackname: 'DialogFlowApi-Dev'
    inboudsmsstackname: 'Whetstone-InboundSms-Dev'
    alexafunctionstackname: 'AlexaFunction-Dev'
    bixbystackname: 'Whetstone-Bixby-Dev'
    coreapistackname: 'WhetstoneCoreApi-Dev'
    slidingexpirationtime: '10000'
    dynamodbmaxretries: '2'
    dynamodbtimeout: '1500'
    codedeployrule: 'AllAtOnce'
    backenddurationmax: '8000'
    sourcePhoneNumber: '12157099492'
    frontenddurationmax: '3500'
  steps:
  - checkout: none
    displayName: Skip Checkout

  - task: DotNetCoreCLI@2
    displayName: 'Install Amazon Lambda Tools'
    inputs:
      command: custom
      custom: tool
      arguments: 'update --tool-path=/usr/local/sbin Amazon.Lambda.Tools --version 5.0'
      # arguments: 'install --global Amazon.Lambda.Tools --version 5.0'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      pipeline: 'Story Engine Build'
      project: 'Whetstone.StoryEngine'
      buildVersionToDownload: latest
      downloadType: 'specific'
      downloadPath: '$(System.ArtifactsDirectory)'
  - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
    displayName: 'S3 Upload: Upload Core templates and zip packages'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      bucketName: '$(utilitybucket)'
      sourceFolder: '$(System.ArtifactsDirectory)/drop/native'
      globExpressions: |
       *.template
       *.zip
      targetFolder: '$(s3keyprefix)'
      filesAcl: 'bucket-owner-full-control'
      contentType: application/json
  - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
    displayName: 'S3 Upload: Upload basic templates'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      bucketName: '$(utilitybucket)'
      sourceFolder: '$(System.ArtifactsDirectory)/drop/basecftemplates'
      globExpressions: |
       *.yml
       *.template
      targetFolder: '$(s3keyprefix)'
      filesAcl: 'bucket-owner-full-control'
      contentType: application/text
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Shared Policy config'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(sharedpoliciesstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginesharedpolicies.yml'
      templateParametersSource: inline
      templateParameters: |
       [{  "ParameterKey": "EnvironmentKeyStack", "ParameterValue": "$(keystackname)" },
       {  "ParameterKey": "DatabaseId", "ParameterValue": "$(databaseId)" },
       {  "ParameterKey": "EngineDatabaseUserName", "ParameterValue": "lambda_proxy" },
       {  "ParameterKey": "BootstrapParameter", "ParameterValue": "$(bootstrapParamKey)" } ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs: $(cfNotificationARN)
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Lambda Utility'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(lambdautilitystack)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/utilities-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {  "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
          {  "ParameterKey": "UtilityFuncBucket", "ParameterValue": "$(utilitybucket)" },
          {  "ParameterKey": "UtilityFuncBucketKey", "ParameterValue": "$(s3keyprefix)/utilities-lambda-native.zip" }
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs:  $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Cognito'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(cognitostackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginecognito.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey": "PoolDomainName", "ParameterValue": "$(cognitoPool)" }     
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityNamedIAM: false
      notificationARNs:  $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Bucket Config'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(bucketstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginebucket.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },     
          {"ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs:  $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
    continueOnError: true
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'Pay-As-You-Go (067b2d38-1520-4d3b-ae21-69992fa5b47b)'
      KeyVaultName: 'SonibridgeBuildVars'
      SecretsFilter: '*'
      RunAsPreJob: false
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(apisecretsstackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(apisecretsstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyengineapikeys.yml'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },     
         {"ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey": "TwilioLiveAccountSid", "ParameterValue": "$(TwilioLiveAccountSid)" },
         {"ParameterKey": "TwilioLiveToken", "ParameterValue": "$(TwilioLiveToken)" },
         {"ParameterKey": "TwilioTestAccountSid", "ParameterValue": "$(TwilioTestAccountSid)" },
         {"ParameterKey": "TwilioTestToken", "ParameterValue": "$(TwilioTestToken)" }
        ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs: $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Dynamo User Table Stack'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(usertablestackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginedynamodb.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "EnvironmentKeyStack", "ParameterValue": "$(keystackname)" },
       {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
       {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
       {"ParameterKey": "IsProduction", "ParameterValue": "false"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityNamedIAM: false
      notificationARNs:  $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
      captureStackOutputs: asVariables
      captureAsSecuredVars: false
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Dynamo Socket API Stack'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(socketinfracturestackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/socketinfrastructure.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
       {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
       {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      notificationARNs: $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
      captureStackOutputs: asVariables
      captureAsSecuredVars: false
      logRequest: true
      logResponse: true
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Dynamo Cache Table Stack'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(cachetablestackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginecachetable.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "EnvironmentKeyStack", "ParameterValue": "$(keystackname)" },
         {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
        {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
        {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
        {"ParameterKey": "IsCacheEnabled", "ParameterValue": "true" },
       {"ParameterKey": "IsProduction", "ParameterValue": "false"} ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      capabilityNamedIAM: false
      notificationARNs: $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
      captureStackOutputs: asVariables
      captureAsSecuredVars: false
    continueOnError: true
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Session Audit Queue'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(sessionqueuestackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/storyenginesessionqueue.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      warnWhenNoWorkNeeded: false
      notificationARNs: $(cfNotificationARN)
    continueOnError: true

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Message Sender Step Function'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(messagesenderstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/messagesender-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         { "ParameterKey": "ApiSecretsStack", "ParameterValue": "$(apisecretsstackname)" },
         { "ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         { "ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)"},
         { "ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)" },
         { "ParameterKey": "DatabaseStack", "ParameterValue": "$(databasestackname)" },
         { "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         { "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         { "ParameterKey": "ParentVpcStack", "ParameterValue": "$(vpcstackname)" },
         { "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
         { "ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)" },         
         { "ParameterKey": "DurationThreshold", "ParameterValue": "$(backenddurationmax)" },
         { "ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)" },
         { "ParameterKey": "MessageSendRetryLimit", "ParameterValue": "4" },
         { "ParameterKey": "DefaultSmsSenderType", "ParameterValue": "Twilio" },
         { "ParameterKey": "SourcePhoneNumber", "ParameterValue": "$(sourcePhoneNumber)"},
         { "ParameterKey": "MessageSenderFuncBucket", "ParameterValue": "$(utilitybucket)"},
         { "ParameterKey": "MessageSenderFuncBucketKey", "ParameterValue": "$(s3keyprefix)/messagesender-lambda-native.zip"},
         { "ParameterKey": "MessageSaveFuncBucketKey", "ParameterValue": "$(s3keyprefix)/messagesavetask-lambda-native.zip"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs: $(cfNotificationARN)
    continueOnError: true

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Session Queue Logger'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(sessionauditloggerstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/sessionlogger-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {  "ParameterKey": "DatabaseStack", "ParameterValue": "$(databasestackname)" },
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {  "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
          {  "ParameterKey": "ParentVpcStack", "ParameterValue": "$(vpcstackname)" },
          {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {  "ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)" },
          {  "ParameterKey": "SessionQueueUserName", "ParameterValue": "lambda_sessionaudit" },
        {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
        {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
       {"ParameterKey": "DurationThreshold", "ParameterValue": "$(backenddurationmax)"},
        {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
       {"ParameterKey": "SessionQueueFuncBucket", "ParameterValue":"$(utilitybucket)"},
       {"ParameterKey": "SessionQueueFuncBucketKey","ParameterValue": "$(s3keyprefix)/sessionlogger-lambda-native.zip"} 
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Report Generator Step Function'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(reportgeneratorstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/reportgen-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
       { "ParameterKey": "DatabaseStack", "ParameterValue": "$(databasestackname)"}, 
       { "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" }, 
       { "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
       { "ParameterKey": "ParentVpcStack", "ParameterValue": "$(vpcstackname)"}, 
       { "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
       {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
       {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
       {"ParameterKey": "DurationThreshold", "ParameterValue": "$(backenddurationmax)"},
       {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
       { "ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
       { "ParameterKey": "ReportGeneratorFuncBucket", "ParameterValue": "$(utilitybucket)" },
       {"ParameterKey":"ReportGeneratorFuncBucketKey", "ParameterValue":"$(s3keyprefix)/reportgen-lambda-native.zip"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      notificationARNs: $(cfNotificationARN)
    continueOnError: true
  
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: DynamoDb Sync '
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(dynamodbsyncstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/dynamodbsync-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
          {  "ParameterKey": "DatabaseStack", "ParameterValue": "$(databasestackname)" },
          { "ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
          {  "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {  "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
          {  "ParameterKey": "ParentVpcStack", "ParameterValue": "$(vpcstackname)" },
          {  "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
          {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
          {"ParameterKey": "DurationThreshold", "ParameterValue": "$(backenddurationmax)"},
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
          {"ParameterKey": "DynamoDBFuncBucket", "ParameterValue":"$(utilitybucket)"},
        {"ParameterKey": "DynamoDBFuncBucketKey","ParameterValue": "$(s3keyprefix)/dynamodbsync-lambda-native.zip"} 
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true
    condition: succeededOrFailed()

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Socket Auth Lambda'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(socketapiauthstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/socketapiauth-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
        { "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
        { "ParameterKey": "CognitoStack", "ParameterValue": "$(cognitostackname)" },
        { "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "true" },
        {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
        {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
        {"ParameterKey": "AuthFuncBucket", "ParameterValue": "$(utilitybucket)"},
        {"ParameterKey": "AuthFuncBucketKey", "ParameterValue": "$(s3keyprefix)/socketapiauth-lambda-native.zip"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
      logRequest: true
      logResponse: true
    continueOnError: true
    condition: succeededOrFailed()



  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Socket Notification Lambda'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(socketnotificationstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/socketnotifications-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         { "ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         { "ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
         { "ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "true" },
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         { "ParameterKey": "SocketInfrastructureStack", "ParameterValue": "$(socketinfracturestackname)" },
         {"ParameterKey": "NotificationFuncBucket", "ParameterValue": "$(utilitybucket)"},
         {"ParameterKey": "NotificationFuncBucketKey", "ParameterValue": "$(s3keyprefix)/socketnotifications-lambda-native.zip"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
      logRequest: true
      logResponse: true
    continueOnError: true
    condition: succeededOrFailed()

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Inbound SMS Processor'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(inboudsmsstackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/smshandler-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "ApiSecretsStack","ParameterValue": "$(apisecretsstackname)"},
         {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
         {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
         {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
         {"ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         {"ParameterKey": "MessageSenderStepFunctionStack", "ParameterValue": "$(messagesenderstackname)" },
         {"ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)" },
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey": "InboundSMSFuncBucket", "ParameterValue":"$(utilitybucket)"},
         {"ParameterKey": "InboundSMSFuncBucketKey","ParameterValue": "$(s3keyprefix)/smshandler-lambda-native.zip"} 
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: Alexa Lambda Client'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(alexafunctionstackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/alexa-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "ApiSecretsStack","ParameterValue": "$(apisecretsstackname)"},
         {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
         {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
         {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
         {"ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         {"ParameterKey": "MessageSenderStepFunctionStack", "ParameterValue": "$(messagesenderstackname)" },
         {"ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)" },
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey": "DurationThreshold", "ParameterValue": "$(frontenddurationmax)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey": "AlexaFuncBucket", "ParameterValue": "$(utilitybucket)" },
         {"ParameterKey":"AlexaFuncBucketKey", "ParameterValue": "$(s3keyprefix)/alexa-lambda-native.zip"},
         {"ParameterKey": "DynamoDBMaxRetries", "ParameterValue": "$(dynamodbmaxretries)"},
         {"ParameterKey": "DynamoDBTimeout", "ParameterValue": "$(dynamodbtimeout)"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(dialogflowstackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(dialogflowstackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/googledialogflow-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "ApiSecretsStack","ParameterValue": "$(apisecretsstackname)"},
         {"ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)" },
         {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
         {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
         {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
         {"ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         {"ParameterKey": "MessageSenderStepFunctionStack", "ParameterValue": "$(messagesenderstackname)" },
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey": "DurationThreshold", "ParameterValue": "$(frontenddurationmax)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey":"GoogleFuncBucket", "ParameterValue": "$(utilitybucket)"},
         {"ParameterKey":"GoogleFuncBucketKey", "ParameterValue": "$(s3keyprefix)/googledialogflow-lambda-native.zip"},
         {"ParameterKey": "DynamoDBMaxRetries", "ParameterValue": "$(dynamodbmaxretries)"},
         {"ParameterKey": "DynamoDBTimeout", "ParameterValue": "$(dynamodbtimeout)"}     
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true
    condition: succeededOrFailed()

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(googleactionstackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(googleactionstackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/googleactiondirect-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "ApiSecretsStack","ParameterValue": "$(apisecretsstackname)"},
         {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
         {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey": "DurationThreshold", "ParameterValue": "$(frontenddurationmax)"},
         {"ParameterKey": "DynamoDBMaxRetries", "ParameterValue": "$(dynamodbmaxretries)"},
         {"ParameterKey": "DynamoDBTimeout", "ParameterValue": "$(dynamodbtimeout)"},
         {"ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)"},
         {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         {"ParameterKey": "MessageSenderStepFunctionStack", "ParameterValue": "$(messagesenderstackname)"},
         {"ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)"},
         {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey":"GoogleActionFuncBucket", "ParameterValue": "$(utilitybucket)"},
         {"ParameterKey":"GoogleActionFuncBucketKey", "ParameterValue": "$(s3keyprefix)/googleactiondirect-lambda-native.zip"},
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
    continueOnError: true
    condition: succeededOrFailed()

  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(bixbystackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(bixbystackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/bixby-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
       [
         {"ParameterKey": "ApiSecretsStack","ParameterValue": "$(apisecretsstackname)"},
         {"ParameterKey": "QueueStack", "ParameterValue": "$(sessionqueuestackname)" },
         {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
         {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
         {"ParameterKey": "SlidingExpirationTime", "ParameterValue": "$(slidingexpirationtime)" },
         {"ParameterKey": "DynamoTableStack", "ParameterValue": "$(usertablestackname)" },
         {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
         {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
         {"ParameterKey": "MessageSenderStepFunctionStack", "ParameterValue": "$(messagesenderstackname)" },
         {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
         {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
         {"ParameterKey": "DurationThreshold", "ParameterValue": "$(frontenddurationmax)"},
         {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
         {"ParameterKey":"BixbyFuncBucket", "ParameterValue": "$(utilitybucket)" },
         {"ParameterKey":"BixbyFuncBucketKey", "ParameterValue":"$(s3keyprefix)/bixby-lambda-native.zip"},
         {"ParameterKey": "DynamoDBMaxRetries", "ParameterValue": "$(dynamodbmaxretries)"},
         {"ParameterKey": "DynamoDBTimeout", "ParameterValue": "$(dynamodbtimeout)"}
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs:  $(cfNotificationARN)
    continueOnError: true
    condition: succeededOrFailed()


  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(coreapistackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: $(coreapistackname)
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/coreapi-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
        [
          {"ParameterKey": "AdminDatabaseUserName", "ParameterValue": "lambda_proxy" },
          {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
          {"ParameterKey": "DatabaseStack", "ParameterValue": "$(databasestackname)" },
          {"ParameterKey": "CacheStack", "ParameterValue": "$(cachetablestackname)" },
          {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {"ParameterKey": "ReportGeneratorStack", "ParameterValue": "$(reportgeneratorstackname)" },
          {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "false" },
          {"ParameterKey": "ParentVpcStack", "ParameterValue": "$(vpcstackname)" },
          {"ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
          {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
          {"ParameterKey": "CognitoStack", "ParameterValue": "$(cognitostackname)" },
          {"ParameterKey":"CoreAPIFuncBucket", "ParameterValue": "$(utilitybucket)" },
          {"ParameterKey":"CoreAPIFuncBucketKey", "ParameterValue":"$(s3keyprefix)/coreapi-lambda-native.zip"}
         ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description:  $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs:  $(cfNotificationARN)
    continueOnError: true


  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(sockethandlerstackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(sockethandlerstackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/socketapi-lambda-native.template'
      templateParametersSource: inline
      templateParameters: |
        [     
          {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {"ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "BucketStack", "ParameterValue": "$(bucketstackname)" },
          {"ParameterKey": "LambdaNetSerializerDebug", "ParameterValue": "true" },
          {"ParameterKey": "CodeDeployRule", "ParameterValue": "$(codedeployrule)"},
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
          {"ParameterKey": "CognitoStack", "ParameterValue": "$(cognitostackname)" },
          {"ParameterKey": "DynamoDBMaxRetries", "ParameterValue": "$(dynamodbmaxretries)"},
          {"ParameterKey": "DynamoDBTimeout", "ParameterValue": "$(dynamodbtimeout)"},
          {"ParameterKey": "SocketInfrastructureStack", "ParameterValue": "$(socketinfracturestackname)" },
          {"ParameterKey": "NotificationsStack", "ParameterValue": "$(socketnotificationstackname)" },
          {"ParameterKey": "VersionDescription", "ParameterValue": "$(versiondescription)"},
          {"ParameterKey":"CoreSocketAPIFuncBucket", "ParameterValue": "$(utilitybucket)" },
          {"ParameterKey":"CoreSocketAPIFuncBucketKey", "ParameterValue":"$(s3keyprefix)/socketapi-lambda-native.zip"}
        ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs:  $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
      logRequest: true
      logResponse: true
    continueOnError: true
  
  - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
    displayName: 'Create/Update Stack: $(socketapistackname)'
    inputs:
      awsCredentials: builduser
      regionName: '$(region)'
      stackName: '$(socketapistackname)'
      templateSource: s3
      s3BucketName: '$(utilitybucket)'
      s3ObjectKey: '$(s3keyprefix)/socketapiserverless.yml'
      templateParametersSource: inline
      templateParameters: |
       [
          {"ParameterKey": "KeyStack", "ParameterValue": "$(keystackname)" },
          {"ParameterKey": "PolicyStack", "ParameterValue": "$(sharedpoliciesstackname)" },
          {"ParameterKey": "CustomActionLambdaStack", "ParameterValue": "$(lambdautilitystack)"},
          {"ParameterKey": "SocketAuthStack", "ParameterValue": "$(socketapiauthstackname)" },
          {"ParameterKey": "SocketHandlerStack", "ParameterValue": "$(sockethandlerstackname)" }
       ]
      useChangeSet: true
      changeSetName: $(changesetName)
      description: $(cfDescription)
      capabilityAutoExpand: true
      notificationARNs: $(cfNotificationARN)
      warnWhenNoWorkNeeded: false
      logRequest: true
      logResponse: true
    continueOnError: true