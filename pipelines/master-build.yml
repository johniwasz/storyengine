# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Whetstone.StoryEngine .NET 5.0 Build

workspace:
    clean: all

trigger:
- master

variables:
  buildnum: 1.0.$(Build.BuildId)
  packagefolder: $(Build.ArtifactStagingDirectory)/nuget

pool:
  name: AWSBuild

parameters:
- name: copyTemplates
  type: object
  default: 
  - display: 'policy'
    contents: storyenginesharedpolicies.yml
  - display: 'bucket'
    contents: storyenginebucket.yml
  - display: 'api keys'
    contents: storyengineapikeys.yml
  - display: 'Cognito'
    contents: storyenginecognito.yml
  - display: 'Socket API'
    contents: socketapiserverless.yml
  - display: user table dynamodb
    contents: storyenginedynamodb.yml
  - display: cache table dynamodb
    contents: storyenginecachetable.yml
  - display: session queue
    contents: storyenginesessionqueue.yml
  - display: 'socket infrastructure'
    contents: socketinfrastructure.yml
- name: packageNuget
  type: object
  default:
  - Whetstone.StoryEngine
  - Whetstone.StoryEngine.Models
  - Whetstone.StoryEngine.Data
  - Whetstone.StoryEngine.Repository
  - Whetstone.StoryEngine.DependencyInjection
  - Whetstone.StoryEngine.Cache
  - Whetstone.StoryEngine.Cache.DynamoDB
#- name: buildContainer
#  type: object
#  default: null

- name: buildNative
  type: object
  default:
  - name: messagesender
    project: Whetstone.StoryEngine.MessageSender
    displayName: Message Sender Native
    origTemplateName: serverless
  - name: alexa
    project: Whetstone.StoryEngine.AlexaFunction
    displayName: Alexa Lambda Native
    origTemplateName: alexalambda
  - name: utilities
    project: Whetstone.StoryEngine.LambdaUtilities
    displayName: Lambda Utilities Native
    origTemplateName: serverless
  - name: bixby
    project: Whetstone.StoryEngine.Bixby.LambdaHost
    displayName: Package Bixby Native
    origTemplateName: bixbyserverless
  - name: sessionlogger
    project: Whetstone.Queue.SessionLogger
    displayName: Package Session Logger Native
    origTemplateName: auditlogger
  - name: smshandler
    project: Whetstone.StoryEngine.InboundSmsHandler
    displayName: Package Inbound SMS Handler Native
    origTemplateName: smshandler
  - name: reportgen
    project: Whetstone.StoryEngine.Reporting.ReportGenerator
    displayName: 'Package Report Generator Native'
    origTemplateName: serverless
  - name: dynamodbsync
    project: Whetstone.StoryEngine.DynamoDBMonitors
    displayName: Package Dynamo DB Sync Native
    origTemplateName: serverless
  - name: coreapi
    project: Whetstone.StoryEngine.CoreApi
    displayName: Package Core API Native
    origTemplateName: coreapiserverless
  - name: googleactiondirect
    project: Whetstone.StoryEngine.Google.Actions.LambdaHost
    displayName: Package Google Action Direct Lambda Host
    origTemplateName: serverless
  - name: googledialogflow
    project: Whetstone.StoryEngine.Google.LambdaHost
    displayName: Package Google Lambda Host
    origTemplateName: dialogflowserverless
  - name: socketapiauth
    project: Whetstone.StoryEngine.SocketApi.Auth
    displayName: Package Socket API Auth Native
    origTemplateName: socketapiauthserverless
  - name: socketapi
    project: Whetstone.StoryEngine.SocketApi
    displayName: Package Socket API Native
    origTemplateName: sockethandlerserverless
  - name: socketnotifications
    project: Whetstone.StoryEngine.Notifications.Lambda
    displayName: Package Socket Notifications Native
    origTemplateName: notificationsserverless
  - name: socketnotifications
    project: Whetstone.StoryEngine.Notifications.Lambda
    displayName: Package Socket Notifications Lambda Native
    origTemplateName: notificationsserverless
  

steps:
- task: DotNetCoreCLI@2
  displayName: 'Install Global Amazon.Lambda.Tools'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'update --tool-path=/usr/local/sbin Amazon.Lambda.Tools --version 5.0'
  

- script: |
   git config --global user.email "builduser@whetstonetechnologies.io"
   git config --global user.name "Build User"
  displayName: 'Set git user info'
  env:
    BUILDNUM: $(buildnum)

- task: DotNetCoreCLI@2
  displayName: 'Restore Packages'
  inputs:
    command: restore
    projects: |
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Cache/Whetstone.StoryEngine.Cache.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine/Whetstone.StoryEngine.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Cache.DynamoDB/Whetstone.StoryEngine.Cache.DynamoDB.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Models/Whetstone.StoryEngine.Models.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Data/Whetstone.StoryEngine.Data.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Repository/Whetstone.StoryEngine.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.DependencyInjection/Whetstone.StoryEngine.DependencyInjection.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.AlexaProcessor/Whetstone.StoryEngine.AlexaProcessor.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Bixby.Repository/Whetstone.StoryEngine.Bixby.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Google.Repository/Whetstone.StoryEngine.Google.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Queue.SessionLogger.Repository/Whetstone.Queue.SessionLogger.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Queue.SessionLogger/Whetstone.Queue.SessionLogger.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Queue.TwiliosStatusUpdate/Whetstone.Queue.TwiliosStatusUpdate.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Sms.Lambda/Whetstone.Sms.Lambda.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.MessageSender/Whetstone.StoryEngine.MessageSender.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.Models/Whetstone.StoryEngine.Reporting.Models.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.ReportRepository/Whetstone.StoryEngine.Reporting.ReportRepository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.ReportGenerator/Whetstone.StoryEngine.Reporting.ReportGenerator.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.WebLibrary/Whetstone.StoryEngine.WebLibrary.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.CoreApi/Whetstone.StoryEngine.CoreApi.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.LambdaUtilities/Whetstone.StoryEngine.LambdaUtilities.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.SocketApi.Repository/Whetstone.StoryEngine.SocketApi.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.SocketApi.Auth/Whetstone.StoryEngine.SocketApi.Auth.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.SocketApi/Whetstone.StoryEngine.SocketApi.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Notifications.Repository/Whetstone.StoryEngine.Notifications.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Notifications.Lambda/Whetstone.StoryEngine.Notifications.Lambda.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Google.Actions/Whetstone.Google.Actions.csproj        
     **/Whetstone.StoryEngine.UnitTests/*.csproj
     
    vstsFeed: '/983e9cfd-40a2-453c-9abe-eb0f3b95ddeb'


#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at 
# queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, 
# and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
- task: DotNetCoreCLI@2
  displayName: 'Build Core'
  inputs:
    projects: |
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Cache/Whetstone.StoryEngine.Cache.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine/Whetstone.StoryEngine.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Cache.DynamoDB/Whetstone.StoryEngine.Cache.DynamoDB.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Models/Whetstone.StoryEngine.Models.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Data/Whetstone.StoryEngine.Data.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Repository/Whetstone.StoryEngine.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.DependencyInjection/Whetstone.StoryEngine.DependencyInjection.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Google.Repository/Whetstone.StoryEngine.Google.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Bixby.Repository/Whetstone.StoryEngine.Bixby.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.Google.Actions/Whetstone.Google.Actions.csproj    
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'Build Reporting'
  inputs:
    projects: |
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.Models/Whetstone.StoryEngine.Reporting.Models.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.ReportRepository/Whetstone.StoryEngine.Reporting.ReportRepository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Reporting.ReportGenerator/Whetstone.StoryEngine.Reporting.ReportGenerator.csproj
    arguments: '--configuration Release'


- task: DotNetCoreCLI@2
  displayName: 'Build Socket API and Notifications Base'
  inputs:
    projects: |
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.SocketApi.Repository/Whetstone.StoryEngine.SocketApi.Repository.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.SocketApi.Auth/Whetstone.StoryEngine.SocketApi.Auth.csproj
     $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.Notifications.Repository/Whetstone.StoryEngine.Notifications.Repository.csproj
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/Whetstone.StoryEngine.UnitTests/*.csproj'

- script: |
   mkdir $nativeoutdir
  displayName: 'Create Native output directory'
  env:
    nativeoutdir: $(build.artifactstagingdirectory)/native

#- ${{ each value in parameters.buildContainer }}:
#  - script: |
#      dotnet build --configuration Release --framework "net5.0" --output app/build
#      dotnet publish --configuration Release --runtime linux-x64 --framework "net5.0" --self-contained false --output app/publish -p:PublishReadyToRun=true
#    displayName: Build ${{ value. displayName }}
#    workingDirectory: $(Build.Repository.LocalPath)/src/${{ value.project }}
#    env:
#      nativeoutdir: $(build.artifactstagingdirectory)/native
#  - task: AWSShellScript@1
#    displayName: Deploy ${{ value. displayName }}
#    inputs:
#      awsCredentials: 'builduser'
#      regionName: 'us-east-1'
#      scriptType: 'inline'
#      inlineScript: |
#        dotnet-lambda package-ci --package-type image --disable-interactive true -t ${{ value.origTemplateName }}.template --output-template $(build.artifactstagingdirectory)/native/${{ value.name }}-lambda-native.template
#      disableAutoCwd: true
#      workingDirectory: $(Build.Repository.LocalPath)/src/${{ value.project }}

- ${{ each value in parameters.buildNative }}:
  - script: |
      dotnet-lambda package -ot ./${{ value.name }}-lambda-native.zip --disable-interactive true --no-restore --framework "net5.0" --configuration Release --msbuild-parameters "/p:PublishReadyToRun=true --self-contained true"
      cp ./${{ value.name }}-lambda-native.zip $nativeoutdir/${{ value.name }}-lambda-native.zip
      echo  "copied ./${{ value.name }}-lambda-native.zip to $nativeoutdir/${{ value.name }}-lambda-native.zip"
      cp ./${{ value.origTemplateName }}.template $nativeoutdir/${{ value.name }}-lambda-native.template
      echo  "copied ./${{ value.origTemplateName }}.template to $nativeoutdir/${{ value.name }}-lambda-native.template"
    displayName: ${{ value. displayName }}
    workingDirectory: $(Build.Repository.LocalPath)/src/${{ value.project }}
    env:
      nativeoutdir: $(build.artifactstagingdirectory)/native

# The Message Save Task does not include a template by design. It is used by the Whetstone.StoryEngine.MessageSender
- script: |
   dotnet-lambda package -ot ./messagesavetask-lambda-native.zip --disable-interactive true --no-restore --framework "net5.0" --configuration Release --msbuild-parameters "/p:PublishReadyToRun=true --self-contained true"
   cp ./messagesavetask-lambda-native.zip $nativeoutdir/messagesavetask-lambda-native.zip
   echo  "copied ./messagesavetask-lambda-native.zip to $nativeoutdir/messagesavetask-lambda-native.zip"
  displayName: 'Package Message Save Task Native'
  workingDirectory: $(Build.Repository.LocalPath)/src/Whetstone.StoryEngine.MessageSender.SaveMessageTask
  env:
    nativeoutdir: $(build.artifactstagingdirectory)/native


- ${{ each value in parameters.packageNuget }}:
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack ${{ value }}'
    inputs:
      command: pack
      packDirectory: '$(packagefolder)'
      packagesToPack: '$(Build.Repository.LocalPath)/src/${{ value }}/${{ value }}.csproj '
      nobuild: true
      versioningScheme: byEnvVar
      versionEnvVar: buildnum

- task: DotNetCoreCLI@2
  displayName: 'Publish Whetstone Nuget Packages'
  inputs:
    command: 'push'
    packagesToPush: '$(packagefolder)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '983e9cfd-40a2-453c-9abe-eb0f3b95ddeb'

- ${{ each value in parameters.copyTemplates }}:
  - task: CopyFiles@2
    displayName: 'Copy ${{ value.display }} template'
    inputs:
      SourceFolder: src/Whetstone.StoryEngine.CloudFormationBase
      Contents: ${{ value.contents }}
      TargetFolder: '$(build.artifactstagingdirectory)/basecftemplates'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'