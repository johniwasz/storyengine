{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Transform":"AWS::Serverless-2016-10-31",
   "Description":"An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",
   "Parameters":{
      "ParentVpcStack":{
         "Description":"Name of stack used to create the VPN and/or subnets. Example: WhetstoneVpc-Dev",
         "Type":"String",
         "Default":"WhetstoneVpc-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "KeyStack":{
         "Description":"Name of stack used to create environment key for decryption. Example: WhetstoneKey-Dev",
         "Type":"String",
         "Default":"WhetstoneKey-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "CacheStack":{
         "Description":"Name of stack used to create the dynamo db cache table: Whetstone-CacheTable-Dev",
         "Type":"String",
         "Default":"Whetstone-CacheTable-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
     "CognitoStack":{
         "Description":"Stack used to create the Cognito User Pool",
         "Type":"String",
         "Default":"Whetstone-Cognito-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "DatabaseStack":{
         "Description":"Name of stack used to create the database or provide a security group. Example: WhetstoneD-Aurora-Dev",
         "Type":"String",
         "Default":"Whetstone-Aurora-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "PolicyStack":{
         "Description":"Name of stack used to create supplemental policies. Example: Whetstone-Aurora-Dev",
         "Type":"String",
         "Default":"Whetstone-Aurora-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "BucketStack":{
         "Description":"Name of stack used to create the Story Engine bucket. Example: WhetstoneBucket-Dev",
         "Type":"String",
         "Default":"WhetstoneBucket-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "LambdaNetSerializerDebug":{
         "Type":"String",
         "AllowedValues":[
            "true",
            "false"
         ],
         "Description":"Indicates if the lambda serialization is enabled or not.",
         "Default":"false"
      },
      "ReportGeneratorStack":{
         "Description":"Name of stack used to generate reports. Example: Whetstone-ReportGenerator-Dev",
         "Type":"String",
         "Default":"Whetstone-ReportGenerator-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "AdminDatabaseUserName":{
         "Type":"String",
         "Description":"Database user with rights required to update core application tables",
         "Default":"lambda_proxy"
      },
      "VersionDescription":{
         "Type":"String",
         "Description":"Associate the deployed version with the build",
         "Default":"Out of band"
      },
      "CodeDeployRule":{
         "AllowedValues":[
            "AllAtOnce",
            "Linear10PercentEvery1Minute",
            "Linear10PercentEvery2Minutes",
            "Linear10PercentEvery3Minutes",
            "Linear10PercentEvery10Minutes",
            "Canary10Percent5Minutes",
            "Canary10Percent10Minutes"
         ],
         "Default":"Linear10PercentEvery1Minute",
         "Description":"Determine whether or not to use a blue/green deployment when pushing out this lambda",
         "Type":"String"
      },
      "CustomActionLambdaStack":{
         "Description":"Stack that defines lambdas for custom resources",
         "Type":"String",
         "Default":"Whetstone-LambdaCustomActions-Dev"
      },
      "CoreAPIFuncBucket":{
         "Description":"S3 Bucket of the Core API Function zip deployment",
         "Type":"String"
      },
      "CoreAPIFuncBucketKey":{
         "Description":"S3 Bucket key of the Core API Function zip deployment",
         "Type":"String"
      }
   },
   "Resources":{
      "KeyPolicyUpdate":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${CustomActionLambdaStack}-KeyPolicyUpdateArn"
               }
            },
            "Key":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${KeyStack}-EnvironmentKeyArn"
               }
            },
            "RoleArn":{
               "Fn::GetAtt":[
                  "CoreApiRole",
                  "Arn"
               ]
            },
            "GrantType":"Decrypt"
         }
      },
      "CoreApiRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":{
               "Fn::Join":[
                  "",
                  [
                     "/",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     "/"
                  ]
               ]
            },
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":"sts:AssumeRole",
                     "Effect":"Allow",
                     "Principal":{
                        "Service":"lambda.amazonaws.com"
                     }
                  }
               ]
            },
            "Policies":[
               {
                  "PolicyName":"DbRole",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":"rds-db:connect",
                           "Resource":{
                              "Fn::Join":[
                                 "",
                                 [
                                    {
                                       "Fn::Sub":"arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:"
                                    },
                                    {
                                       "Fn::ImportValue":{
                                          "Fn::Sub":"${PolicyStack}-DatabaseId"
                                       }
                                    },
                                    {
                                       "Fn::Sub":"/${AdminDatabaseUserName}"
                                    }
                                 ]
                              ]
                           }
                        }
                     ]
                  }
               },
               {
                  "PolicyName":"CognitoOpen",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Sid":"VisualEditor0",
                           "Effect":"Allow",
                           "Action":[
                              "cognito-idp:InitiateAuth",
                              "cognito-idp:SignUp",
                              "cognito-idp:ConfirmSignUp",
                              "cognito-idp:ChangePassword",
                              "cognito-idp:GlobalSignOut",
                              "cognito-idp:ConfirmForgotPassword",
                              "cognito-idp:ConfirmDevice",
                              "cognito-idp:ResendConfirmationCode",
                              "cognito-idp:RespondToAuthChallenge",
                              "cognito-idp:DeleteUser",
                              "cognito-idp:ForgetDevice",
                              "cognito-idp:UpdateUserAttributes",
                              "cognito-idp:VerifyUserAttribute",
                              "cognito-idp:DeleteUserAttributes",
                              "cognito-idp:AdminGetUser",
                              "cognito-idp:GetUser",
                              "cognito-idp:GetDevice",
                              "cognito-idp:GetSigningCertificate"
                           ],
                           "Resource":"*"
                        }
                     ]
                  }
               },
               {
                  "PolicyName":"CognitoGroups",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "cognito-idp:CreateGroup",
                              "cognito-idp:GetGroup",
                              "cognito-idp:DeleteGroup",
                              "cognito-idp:UpdateGroup"
                           ],
                           "Resource":  {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${CognitoStack}-UserPoolArn"
                        }
                     }

                           }
                        
                     ]
                  }
               }
            ],
            "ManagedPolicyArns":[
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${PolicyStack}-BootstrapConfigPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${BucketStack}-BucketWriterPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${CacheStack}-CacheTableAccessPolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${ReportGeneratorStack}-ReportGeneratorStepFunctionPolicyArn"
                  }
               },
               "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
               "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            ]
         }
      },
      "AspNetCoreFunction":{
         "Type":"AWS::Serverless::Function",
         "Properties":{
            "CodeUri":{
               "Bucket":{
                  "Ref":"CoreAPIFuncBucket"
               },
               "Key":{
                  "Ref":"CoreAPIFuncBucketKey"
               }
            },
            "FunctionName":{
               "Fn::Join":[
                  "",
                  [
                     "WhetstoneCoreApi-",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     }
                  ]
               ]
            },
            "AutoPublishAlias":"LIVE",
            "DeploymentPreference":{
               "Enabled":true,
               "Type":{
                  "Ref":"CodeDeployRule"
               }
            },
            "VersionDescription":{
               "Fn::Sub":"${VersionDescription}"
            },
            "Description":"Function handles the Core API administration functions, like updating story titles, nodes, etc.",
            "Environment":{
               "Variables":{
                  "DOTNET_SHARED_STORE":"/opt/dotnetcore/store/",
                  "BOOTSTRAP":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${PolicyStack}-BootstrapParameter"
                     }
                  },
                  "LAMBDA_NET_SERIALIZER_DEBUG":{
                     "Ref":"LambdaNetSerializerDebug"
                  },
                  "DBUSERTYPE":"AdminUser"
               }
            },
            "Handler":"not-required",
            "Runtime":"provided",
            "MemorySize":1024,
            "Policies":[
               "AWSLambdaFullAccess"
            ],
            "Role":{
               "Fn::GetAtt":[
                  "CoreApiRole",
                  "Arn"
               ]
            },
            "Timeout":30,
            "VpcConfig":{
               "SubnetIds":[
                  {
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ParentVpcStack}-SubnetAPrivate"
                     }
                  },
                  {
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ParentVpcStack}-SubnetBPrivate"
                     }
                  },
                  {
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ParentVpcStack}-SubnetCPrivate"
                     }
                  }
               ],
               "SecurityGroupIds":[
                  {
                     "Fn::ImportValue":{
                        "Fn::Sub":"${DatabaseStack}-SecurityGroup"
                     }
                  },
                  {
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ParentVpcStack}-SSMSecurityGroup"
                     }
                  }
               ]
            }
         }
      },
      "CoreStoryKey":{
         "Type":"AWS::ApiGateway::ApiKey",
         "Properties":{
            "Description":{
               "Fn::Join":[
                  "",
                  [
                     "For use with the Story Engine Core ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API"
                  ]
               ]
            },
            "Enabled":true,
            "Name":{
               "Fn::Join":[
                  "",
                  [
                     "Story Engine Core ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API Key"
                  ]
               ]
            }
         }
      },
      "ApiResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "ParentId":{
               "Fn::GetAtt":[
                  "ServerlessRestApi",
                  "RootResourceId"
               ]
            },
            "PathPart":"api"
         }
      },
      "ProxyResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "ParentId":{
               "Ref":"ApiResource"
            },
            "PathPart":"{proxy+}"
         }
      },
      "ServerlessRestApi":{
         "Type":"AWS::ApiGateway::RestApi",
         "DependsOn":"AspNetCoreFunction",
         "Properties":{
            "Name":{
               "Fn::Join":[
                  "",
                  [
                     "WhetstoneCoreApi-",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     }
                  ]
               ]
            },
            "Description":"Whetstone Core Admin API Stack",
            "ApiKeySourceType":"HEADER",
            "BinaryMediaTypes":[
               "image~1png",
               "image~1jpeg",
               "image~1gif",
               "image~1apng",
               "image~1webp",
               "image~1x-icon",
               "application~1zip",
               "application~1octet-stream",
               "audio~1mpeg",
               "audio~1wav"
            ],
            "EndpointConfiguration":{
               "Types":[
                  "REGIONAL"
               ]
            }
         }
      },
      "AdminApiPostMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApi",
            "ProxyResource"
         ],
         "Properties":{
            "AuthorizationType":"NONE",
            "OperationName":"Core API Post Request",
            "ApiKeyRequired":true,
            "ResourceId":{
               "Ref":"ProxyResource"
            },
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "HttpMethod":"POST",
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS_PROXY",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}:LIVE/invocations"
               }
            }
         }
      },
      "AdminApiGetMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApi"
         ],
         "Properties":{
            "AuthorizationType":"NONE",
            "OperationName":"Core API GET Request",
            "ApiKeyRequired":true,
            "ResourceId":{
               "Ref":"ProxyResource"
            },
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "HttpMethod":"GET",
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS_PROXY",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}:LIVE/invocations"
               }
            }
         }
      },
      "AdminApiDeleteMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApi"
         ],
         "Properties":{
            "AuthorizationType":"NONE",
            "OperationName":"Core API Post Request",
            "ApiKeyRequired":true,
            "ResourceId":{
               "Ref":"ProxyResource"
            },
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "HttpMethod":"DELETE",
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS_PROXY",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}:LIVE/invocations"
               }
            }
         }
      },
      "AdminApiOptionsMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApi"
         ],
         "Properties":{
            "AuthorizationType":"NONE",
            "OperationName":"Core API Options Request",
            "ApiKeyRequired":false,
            "ResourceId":{
               "Ref":"ProxyResource"
            },
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "HttpMethod":"OPTIONS",
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS_PROXY",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}:LIVE/invocations"
               }
            }
         }
      },
      "AdminApiPutMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApi"
         ],
         "Properties":{
            "AuthorizationType":"NONE",
            "OperationName":"Core API Put Request",
            "ApiKeyRequired":true,
            "ResourceId":{
               "Ref":"ProxyResource"
            },
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "HttpMethod":"PUT",
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS_PROXY",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}:LIVE/invocations"
               }
            }
         }
      },
      "AspNetCoreFunctionPostResourcePermissionProd":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:invokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "FunctionName":{
               "Fn::Sub":"${AspNetCoreFunction.Arn}:LIVE"
            },
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/prod/POST/api/*"
            }
         }
      },
      "AspNetCoreFunctionGetResourcePermissionProd":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:invokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "FunctionName":{
               "Fn::Sub":"${AspNetCoreFunction.Arn}:LIVE"
            },
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/prod/GET/api/*"
            }
         }
      },
      "AspNetCoreFunctionPutResourcePermissionProd":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:invokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "FunctionName":{
               "Fn::Sub":"${AspNetCoreFunction.Arn}:LIVE"
            },
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/prod/PUT/api/*"
            }
         }
      },
      "AspNetCoreFunctionDeleteResourcePermissionProd":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:invokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "FunctionName":{
               "Fn::Sub":"${AspNetCoreFunction.Arn}:LIVE"
            },
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/prod/DELETE/api/*"
            }
         }
      },
      "AspNetCoreFunctionOptionsResourcePermissionProd":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:invokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "FunctionName":{
               "Fn::Sub":"${AspNetCoreFunction.Arn}:LIVE"
            },
            "SourceArn":{
               "Fn::Sub":"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/prod/OPTIONS/api/*"
            }
         }
      },
      "UsagePlanKey":{
         "Type":"AWS::ApiGateway::UsagePlanKey",
         "DependsOn":[
            "CoreStoryKey",
            "CoreStoryApiUsage"
         ],
         "Properties":{
            "KeyType":"API_KEY",
            "KeyId":{
               "Ref":"CoreStoryKey"
            },
            "UsagePlanId":{
               "Ref":"CoreStoryApiUsage"
            }
         }
      },
      "CoreStoryApiUsage":{
         "Type":"AWS::ApiGateway::UsagePlan",
         "DependsOn":[
            "AspNetCoreFunction",
            "ServerlessRestApiDeploymentProd",
            "ServerlessRestApiDeploymentStage"
         ],
         "Properties":{
            "UsagePlanName":{
               "Fn::Join":[
                  "",
                  [
                     "Core API ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " Usage Plan"
                  ]
               ]
            },
            "Description":{
               "Fn::Join":[
                  "",
                  [
                     "For use with the Core ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API"
                  ]
               ]
            },
            "ApiStages":[
               {
                  "ApiId":{
                     "Fn::Sub":"${ServerlessRestApi}"
                  },
                  "Stage":"prod"
               },
               {
                  "ApiId":{
                     "Fn::Sub":"${ServerlessRestApi}"
                  },
                  "Stage":"stage"
               }
            ]
         }
      },
      "ServerlessRestApiDeploymentProd":{
         "Type":"AWS::ApiGateway::Deployment",
         "DependsOn":[
            "AdminApiPostMethod",
            "AdminApiGetMethod",
            "AdminApiDeleteMethod",
            "AdminApiPutMethod",
            "AdminApiOptionsMethod"
         ],
         "Properties":{
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "Description":"RestApi production deployment",
            "StageName":"prod"
         }
      },
      "ServerlessRestApiDeploymentStage":{
         "Type":"AWS::ApiGateway::Deployment",
         "DependsOn":[
            "AdminApiPostMethod",
            "AdminApiGetMethod",
            "AdminApiDeleteMethod",
            "AdminApiPutMethod",
            "AdminApiOptionsMethod"
         ],
         "Properties":{
            "RestApiId":{
               "Ref":"ServerlessRestApi"
            },
            "Description":"RestApi stage deployment",
            "StageName":"stage"
         }
      }
   },
   "Outputs":{
      "CoreStoryKeyID":{
         "Value":{
            "Ref":"CoreStoryKey"
         }
      },
      "CoreApiID":{
         "Value":{
            "Fn::Sub":"${ServerlessRestApi}"
         }
      },
      "ApiURL":{
         "Value":{
            "Fn::Sub":"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
         }
      },
      "CoreAPIRole":{
         "Description":"ARN of the role used by this API",
         "Value":{
            "Fn::GetAtt":[
               "CoreApiRole",
               "Arn"
            ]
         }
      },
      "GetMethodId":{
         "Value":{
            "Ref":"AdminApiGetMethod"
         }
      },
      "DeleteMethodId":{
         "Value":{
            "Ref":"AdminApiDeleteMethod"
         }
      },
      "PostMethodId":{
         "Value":{
            "Ref":"AdminApiPostMethod"
         }
      },
      "PutMethodId":{
         "Value":{
            "Ref":"AdminApiPutMethod"
         }
      },
      "OptionsMethodId":{
         "Value":{
            "Ref":"AdminApiOptionsMethod"
         }
      }
   }
}