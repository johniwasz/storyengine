{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application.",
  "Parameters": {    
    "KeyStack": {
      "Description": "Name of stack used to create environment key for decryption. Example: WhetstoneKey-Dev",
      "Type": "String",
      "Default": "WhetstoneKey-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "PolicyStack": {
      "Description": "Name of stack used to create supplemental policies. Example: WhetstoneSharedPolicies-Dev",
      "Type": "String",
      "Default": "WhetstoneSharedPolicies-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "BucketStack": {
      "Description": "Name of stack used to create the Story Engine bucket. Example: WhetstoneBucket-Dev",
      "Type": "String",
      "Default": "WhetstoneBucket-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "LambdaNetSerializerDebug": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Indicates if the lambda serialization is enabled or not.",
      "Default": "false"
    },
    "CodeDeployRule": {
      "AllowedValues": [
        "AllAtOnce",
        "Linear10PercentEvery1Minute",
        "Linear10PercentEvery2Minutes",
        "Linear10PercentEvery3Minutes",
        "Linear10PercentEvery10Minutes",
        "Canary10Percent5Minutes",
        "Canary10Percent10Minutes"
      ],
      "Default": "Linear10PercentEvery1Minute",
      "Description": "Determine whether or not to use a blue/green deployment when pushing out this lambda",
      "Type": "String"
    },
    "CustomActionLambdaStack": {
      "Description": "Stack that defines lambdas for custom resources",
      "Type": "String",
      "Default": "Whetstone-LambdaCustomActions-Dev"
    },
    "CognitoStack": {
      "Description": "Name of stack used to create cognito and security settings. Example: Whetstone-Cognito-Dev",
      "Type": "String",
      "Default": "Whetstone-Cognito-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },    
    "DynamoDBMaxRetries": {
      "Type": "Number",
      "Description": "Number of times DynamoDB will retry the operation before abandoning.",
      "Default": "3"
    },
    "DynamoDBTimeout": {
      "Type": "Number",
      "Description": "How many milliseconds the DynamoDB request will wait before timing out.",
      "Default": "2000"
    },
    "SocketInfrastructureStack": {
        "Description": "Name of stack used to create the tables and policies for socket/notification infrastructure. Example: Whetstone-SocketInfrastructure-Dev",
        "Type": "String",
        "Default": "Whetstone-SocketInfrastructure-Dev",
        "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "NotificationsStack": {
        "Description": "Name of stack used to manage async notifications. Example: Whetstone-Notifications-Dev",
        "Type": "String",
        "Default": "Whetstone-Notifications-Dev",
        "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
          "CoreSocketAPIFuncBucket":{
         "Description":"S3 Bucket of the Core Socket API Function zip deployment",
         "Type":"String"
      },
      "CoreSocketAPIFuncBucketKey":{
         "Description":"S3 Bucket key of the Core Socket API Function zip deployment",
         "Type":"String"
      },
    "VersionDescription":{
         "Type":"String",
         "Description":"Associate the deployed version with the build",
         "Default":"Out of band"
      }
    },

  "Resources": {
    "KeyPolicyUpdate":{
         "Type":"AWS::CloudFormation::CustomResource",
         "DependsOn": [
         "SocketHandlerApiRole"
         ],
         "Properties":{
            "ServiceToken":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${CustomActionLambdaStack}-KeyPolicyUpdateArn"
               }
            },
            "Key":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${KeyStack}-EnvironmentKeyArn"
               }
            },
            "RoleArn":{
               "Fn::GetAtt":[
                  "SocketHandlerApiRole",
                  "Arn"
               ]
            },
            "GrantType":"Decrypt"
         }
      },
    "SocketHandlerApiRole":{
        "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":{
                "Fn::Join":[
                    "",
                    [
                        "/",
                        {
                        "Fn::ImportValue":{
                            "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                        },
                        "/"
                    ]
                ]
            },
            "AssumeRolePolicyDocument":{
                "Version":"2012-10-17",
                "Statement":[
                    {
                        "Action":"sts:AssumeRole",
                        "Effect":"Allow",
                        "Principal":{
                        "Service":"lambda.amazonaws.com"
                        }
                    }
                ]
            },
            "ManagedPolicyArns":[
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${PolicyStack}-BootstrapConfigPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${BucketStack}-BucketReaderPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${SocketInfrastructureStack}-ConnectionMappingTablePolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${SocketInfrastructureStack}-ManageSocketConnectionsPolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${NotificationsStack}-InvokeNotificationsFunctionPolicyArn"
                  }
               },
               "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
               "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            ]
        }
    },
    "SocketHandlerFunction": {
      "Type": "AWS::Serverless::Function",
      "DependsOn": [
      "SocketHandlerApiRole"
      ],
      "Properties": {
       	"Handler": "not-required",
        "Runtime": "provided",   
        "MemorySize": 256,
        "Timeout": 30,
        "Role":{
            "Fn::GetAtt":[
                "SocketHandlerApiRole",
                "Arn"
            ]
        },
        "CodeUri":{
               "Bucket":{
                  "Ref":"CoreSocketAPIFuncBucket"
               },
               "Key":{
                  "Ref":"CoreSocketAPIFuncBucketKey"
               }
            },
        "AutoPublishAlias":"LIVE",
        "DeploymentPreference":{
            "Enabled":true,
            "Type":{
                "Ref":"CodeDeployRule"
            }
        },
        "VersionDescription":{
               "Fn::Sub":"${VersionDescription}"
            },
        "Environment": {
          "Variables": {
            "DOTNET_SHARED_STORE":"/opt/dotnetcore/store/",
            "BOOTSTRAP":{
                "Fn::ImportValue":{
                "Fn::Sub":"${PolicyStack}-BootstrapParameter"
                }
            },
            "LAMBDA_NET_SERIALIZER_DEBUG":{
                "Ref":"LambdaNetSerializerDebug"
            },
            "DBUSERTYPE":"AdminUser"
          }
        }
      }
    }
  },  
  "Outputs": {
    "SocketHandlerArn": {
      "Description": "Arn of the socket handler lambda",
      "Value": {
        "Fn::GetAtt": [
            "SocketHandlerFunction",
            "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SocketHandlerArn"
        }
      }
    },
    "SocketHandlerLiveArn": {
      "Description": "Arn of the socket handler lambda live alias",
      "Value": {
        "Fn::Sub": [
          "${lambdaArn}:LIVE",
          {
            "lambdaArn": {
              "Fn::GetAtt": [
                  "SocketHandlerFunction",
                  "Arn"
              ]
            }
          }
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SocketHandlerLiveArn"
        }
      }
    }
  }
}