// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Whetstone.StoryEngine.Data.EntityFramework;

namespace Whetstone.StoryEngine.Data.Create.Migrations
{
    [DbContext(typeof(UserDataContext))]
    [Migration("20200621171848_Security01Update")]
    partial class Security01Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("whetstone")
                .HasAnnotation("Npgsql:PostgresExtension:hstore", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataFunctionalEntitlement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Claim")
                        .IsRequired()
                        .HasColumnName("claim")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("funcentitlements");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataFunctionalEntitlementRoleXRef", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FunctionalEntitlementId")
                        .HasColumnName("func_entitlement_id")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "FunctionalEntitlementId")
                        .HasName("pk_role_funcentitlement");

                    b.HasIndex("FunctionalEntitlementId");

                    b.ToTable("funcent_role_xrefs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataGroup", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataGroupRoleXRef", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "RoleId")
                        .HasName("pk_group_role");

                    b.HasIndex("RoleId");

                    b.ToTable("group_role_xrefs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataOrganization", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("isenabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionLevelId")
                        .HasColumnName("subscriptionlevel_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionLevelId");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataPhone", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGetSmsMessage")
                        .HasColumnName("cangetsmsmessage")
                        .HasColumnType("boolean");

                    b.Property<string>("CarrierCountryCode")
                        .HasColumnName("carriercountrycode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierErrorCode")
                        .HasColumnName("carriererrorcode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierName")
                        .HasColumnName("carriername")
                        .HasColumnType("text");

                    b.Property<string>("CarrierNetworkCode")
                        .HasColumnName("carriernetworkcode")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnName("countrycode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnName("isverified")
                        .HasColumnType("boolean");

                    b.Property<string>("NationalFormat")
                        .HasColumnName("nationalformat")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phonenumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneService")
                        .HasColumnName("phoneservice")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredErrorCode")
                        .HasColumnName("registerederrorcode")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredName")
                        .HasColumnName("registeredname")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredType")
                        .HasColumnName("registeredtype")
                        .HasColumnType("text");

                    b.Property<int>("SystemStatus")
                        .HasColumnName("systemstatus")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("phonetype")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("phonenumbers");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataSubscriptionLevel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("subscriptionlevels");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitle", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("shortname")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("titles");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("Client")
                        .HasColumnName("client")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("createdtime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentNodeName")
                        .HasColumnName("nodename")
                        .HasColumnType("text");

                    b.Property<string>("HashKey")
                        .HasColumnName("hashkey")
                        .HasColumnType("text");

                    b.Property<bool?>("IsGuest")
                        .HasColumnName("isguest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastAccessedDate")
                        .HasColumnName("lastaccesseddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Locale")
                        .HasColumnName("userlocale")
                        .HasColumnType("text");

                    b.Property<string>("PermanentTitleStateJson")
                        .HasColumnName("permanenttitlecrumbs")
                        .HasColumnType("jsonb");

                    b.Property<string>("StoryNodeName")
                        .HasColumnName("storynodename")
                        .HasColumnType("text");

                    b.Property<Guid>("TitleId")
                        .HasColumnName("titleid")
                        .HasColumnType("uuid");

                    b.Property<string>("TitleStateJson")
                        .HasColumnName("titlecrumbs")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("clientuserid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TitleId", "Client", "UserId")
                        .IsUnique();

                    b.ToTable("title_clientusers");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleGroupXRef", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TitleId")
                        .HasColumnName("title_id")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "TitleId")
                        .HasName("pk_group_title");

                    b.HasIndex("TitleId");

                    b.ToTable("title_group_xrefs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersion", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnName("deletedate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LogFullClientMessages")
                        .HasColumnName("logfullclientmessages")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TitleId")
                        .HasColumnName("titleid")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TitleId", "Version")
                        .IsUnique();

                    b.ToTable("titleversions");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersionDeployment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasColumnName("alias")
                        .HasColumnType("text");

                    b.Property<int>("Client")
                        .HasColumnName("client")
                        .HasColumnType("integer");

                    b.Property<string>("ClientIdentifier")
                        .HasColumnName("clientidentifier")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnName("deletedate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnName("publishdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("VersionId")
                        .HasColumnName("versionid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("titleversiondeployments");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("CognitoSub")
                        .HasColumnName("cognito_sub")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataUserGroupXRef", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "UserId")
                        .HasName("pk_user_group");

                    b.HasIndex("UserId");

                    b.ToTable("user_group_xrefs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EngineRequestId")
                        .HasColumnName("enginerequestid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSmsConsentGranted")
                        .HasColumnName("isconsentgiven")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("PhoneId")
                        .HasColumnName("phoneid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SmsConsentDate")
                        .HasColumnName("smsconsentdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TitleClientUserId")
                        .HasColumnName("titleclientuserid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TitleVersionId")
                        .HasColumnName("titleversionid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PhoneId");

                    b.HasIndex("TitleClientUserId");

                    b.HasIndex("TitleVersionId");

                    b.ToTable("userphoneconsents");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineRequestAudit", b =>
                {
                    b.Property<Guid?>("SessionId")
                        .HasColumnName("sessionid")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestId")
                        .HasColumnName("requestid")
                        .HasColumnType("text");

                    b.Property<int?>("CanFulfill")
                        .HasColumnName("canfulfill")
                        .HasColumnType("integer");

                    b.Property<string>("ClientRequestText")
                        .HasColumnName("responsebody")
                        .HasColumnType("text");

                    b.Property<string>("ClientResponseText")
                        .HasColumnName("requestbody")
                        .HasColumnType("text");

                    b.Property<string>("EngineError")
                        .HasColumnName("engineerror")
                        .HasColumnType("text");

                    b.Property<Guid?>("Id")
                        .IsRequired()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<float?>("IntentConfidence")
                        .HasColumnName("intentconfidence")
                        .HasColumnType("real");

                    b.Property<string>("IntentName")
                        .HasColumnName("intentname")
                        .HasColumnType("text");

                    b.Property<string>("MappedNode")
                        .HasColumnName("mappednode")
                        .HasColumnType("text");

                    b.Property<string>("PostNodeActionLog")
                        .HasColumnName("postnodeactionlog")
                        .HasColumnType("text");

                    b.Property<string>("PreNodeActionLog")
                        .HasColumnName("prenodeactionlog")
                        .HasColumnType("text");

                    b.Property<long>("ProcessDuration")
                        .HasColumnName("processduration")
                        .HasColumnType("bigint");

                    b.Property<string>("RawText")
                        .HasColumnName("rawtext")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("RequestAttributes")
                        .HasColumnName("requestattributes")
                        .HasColumnType("hstore");

                    b.Property<int>("RequestType")
                        .HasColumnName("requesttype")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseConversionError")
                        .HasColumnName("responseconversionerror")
                        .HasColumnType("text");

                    b.Property<DateTime>("SelectionTime")
                        .HasColumnName("selectiontime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SlotFulFillmentJson")
                        .HasColumnName("slotfulfillment")
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, string>>("Slots")
                        .HasColumnName("slots")
                        .HasColumnType("hstore");

                    b.HasKey("SessionId", "RequestId");

                    b.HasIndex("SessionId");

                    b.ToTable("engine_requestaudit");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineSession", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeploymentId")
                        .HasColumnName("deploymentid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsFirstSession")
                        .HasColumnName("isfirstsession")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedDate")
                        .HasColumnName("lastaccesseddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Locale")
                        .HasColumnName("userlocale")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<Dictionary<string, string>>("SessionAttributes")
                        .HasColumnName("sessionattributes")
                        .HasColumnType("hstore");

                    b.Property<string>("SessionId")
                        .HasColumnName("sessionid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TitleUserId")
                        .HasColumnName("titleuserid")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TitleUserId");

                    b.ToTable("engine_session");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<bool>("AllSent")
                        .HasColumnName("allsent")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ConsentId")
                        .HasColumnName("consentid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EngineRequestId")
                        .HasColumnName("enginerequestid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SmsFromNumberId")
                        .HasColumnName("smsfromnumberid")
                        .HasColumnType("uuid");

                    b.Property<int?>("SmsProvider")
                        .HasColumnName("smsprovider")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SmsToNumberId")
                        .HasColumnName("smstonumberid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleUserId")
                        .IsRequired()
                        .HasColumnName("titleclientid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SmsFromNumberId");

                    b.HasIndex("SmsToNumberId");

                    b.ToTable("outbound_batches");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessageLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtendedStatus")
                        .HasColumnName("extendedstatus")
                        .HasColumnType("text");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnName("httpstatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsException")
                        .HasColumnName("isexception")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LogTime")
                        .HasColumnName("logtime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OutboundMessageId")
                        .HasColumnName("outboundmessageid")
                        .HasColumnType("uuid");

                    b.Property<long?>("ProviderSendDuration")
                        .HasColumnName("providersendduration")
                        .HasColumnType("bigint");

                    b.Property<int>("SendStatus")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LogTime");

                    b.HasIndex("OutboundMessageId");

                    b.ToTable("outboundmessage_logs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<Guid>("OutboundBatchRecordId")
                        .HasColumnName("outboundbatchrecordid")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnName("providermessageid")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Tags")
                        .HasColumnName("tags")
                        .HasColumnType("hstore");

                    b.HasKey("Id");

                    b.HasIndex("OutboundBatchRecordId");

                    b.ToTable("outbound_messages");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataFunctionalEntitlementRoleXRef", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataFunctionalEntitlement", "FunctionalEntitlement")
                        .WithMany("FunctionalEntitlementRoleXRefs")
                        .HasForeignKey("FunctionalEntitlementId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataRole", "Role")
                        .WithMany("FunctionalEntitlementRoleXRefs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataGroup", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataOrganization", null)
                        .WithMany("Groups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataGroupRoleXRef", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataGroup", "Group")
                        .WithMany("GroupRoleXRefs")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataRole", "Role")
                        .WithMany("GroupRoleXRef")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataOrganization", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataSubscriptionLevel", null)
                        .WithMany("Organizations")
                        .HasForeignKey("SubscriptionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitle", "Title")
                        .WithMany("TitleUsers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleGroupXRef", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataGroup", "Group")
                        .WithMany("TitleGroupXRef")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitle", "Title")
                        .WithMany("TitleGroupXRef")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersion", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitle", "Title")
                        .WithMany("Versions")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersionDeployment", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleVersion", "Version")
                        .WithMany("VersionDeployments")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataUserGroupXRef", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataGroup", "Group")
                        .WithMany("UserGroupXRefs")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataUser", "User")
                        .WithMany("GroupXRefs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "Phone")
                        .WithMany("ConsentRecords")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", "TitleUser")
                        .WithMany("TitleUserPhones")
                        .HasForeignKey("TitleClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleVersion", "TitleVersion")
                        .WithMany("PhoneConsentRecords")
                        .HasForeignKey("TitleVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineRequestAudit", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.EngineSession", null)
                        .WithMany("Selections")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineSession", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", null)
                        .WithMany("Sessions")
                        .HasForeignKey("TitleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", "Consent")
                        .WithMany("OutboundMessageBatches")
                        .HasForeignKey("ConsentId");

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "SentFromPhone")
                        .WithMany("SentFromSmsBatches")
                        .HasForeignKey("SmsFromNumberId");

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "SentToPhone")
                        .WithMany("SentToSmsBatches")
                        .HasForeignKey("SmsToNumberId");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessageLogEntry", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload", null)
                        .WithMany("Results")
                        .HasForeignKey("OutboundMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord", null)
                        .WithMany("Messages")
                        .HasForeignKey("OutboundBatchRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
