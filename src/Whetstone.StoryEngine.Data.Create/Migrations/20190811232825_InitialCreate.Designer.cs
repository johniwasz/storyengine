// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Whetstone.StoryEngine.Data.EntityFramework;

namespace Whetstone.StoryEngine.Data.Create.Migrations
{
    [DbContext(typeof(UserDataContext))]
    [Migration("20190811232825_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("whetstone")
                .HasAnnotation("Npgsql:PostgresExtension:hstore", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataPhone", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("CanGetSmsMessage")
                        .HasColumnName("cangetsmsmessage");

                    b.Property<string>("CarrierCountryCode")
                        .HasColumnName("carriercountrycode");

                    b.Property<string>("CarrierErrorCode")
                        .HasColumnName("carriererrorcode");

                    b.Property<string>("CarrierName")
                        .HasColumnName("carriername");

                    b.Property<string>("CarrierNetworkCode")
                        .HasColumnName("carriernetworkcode");

                    b.Property<string>("CountryCode")
                        .HasColumnName("countrycode");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("createdate");

                    b.Property<bool>("IsVerified")
                        .HasColumnName("isverified");

                    b.Property<string>("NationalFormat")
                        .HasColumnName("nationalformat");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phonenumber");

                    b.Property<string>("PhoneService")
                        .HasColumnName("phoneservice");

                    b.Property<string>("RegisteredErrorCode")
                        .HasColumnName("registerederrorcode");

                    b.Property<string>("RegisteredName")
                        .HasColumnName("registeredname");

                    b.Property<string>("RegisteredType")
                        .HasColumnName("registeredtype");

                    b.Property<int>("SystemStatus")
                        .HasColumnName("systemstatus");

                    b.Property<int>("Type")
                        .HasColumnName("phonetype");

                    b.Property<string>("Url")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("phonenumbers");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitle", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("shortname");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("titles");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id");

                    b.Property<int>("Client")
                        .HasColumnName("client");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("createdtime");

                    b.Property<string>("CurrentNodeName")
                        .HasColumnName("nodename");

                    b.Property<string>("HashKey")
                        .HasColumnName("hashkey");

                    b.Property<DateTime>("LastAccessedDate")
                        .HasColumnName("lastaccesseddate");

                    b.Property<string>("Locale")
                        .HasColumnName("userlocale");

                    b.Property<string>("PermanentTitleStateJson")
                        .HasColumnName("permanenttitlecrumbs")
                        .HasColumnType("jsonb");

                    b.Property<string>("StoryNodeName")
                        .HasColumnName("storynodename");

                    b.Property<Guid>("TitleId")
                        .HasColumnName("titleid");

                    b.Property<string>("TitleStateJson")
                        .HasColumnName("titlecrumbs")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("clientuserid");

                    b.HasKey("Id");

                    b.HasIndex("TitleId", "Client", "UserId")
                        .IsUnique();

                    b.ToTable("title_clientusers");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersion", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnName("deletedate");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("LogFullClientMessages")
                        .HasColumnName("logfullclientmessages");

                    b.Property<Guid>("TitleId")
                        .HasColumnName("titleid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("TitleId", "Version")
                        .IsUnique();

                    b.ToTable("titleversions");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersionDeployment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<int>("Client")
                        .HasColumnName("client");

                    b.Property<string>("ClientIdentifier")
                        .HasColumnName("clientidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnName("deletedate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnName("publishdate");

                    b.Property<Guid>("VersionId")
                        .HasColumnName("versionid");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("titleversiondeployments");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id");

                    b.Property<Guid>("EngineRequestId")
                        .HasColumnName("enginerequestid");

                    b.Property<bool>("IsSmsConsentGranted")
                        .HasColumnName("isconsentgiven");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<Guid>("PhoneId")
                        .HasColumnName("phoneid");

                    b.Property<DateTime?>("SmsConsentDate")
                        .HasColumnName("smsconsentdate");

                    b.Property<Guid>("TitleClientUserId")
                        .HasColumnName("titleclientuserid");

                    b.Property<Guid>("TitleVersionId")
                        .HasColumnName("titleversionid");

                    b.HasKey("Id");

                    b.HasIndex("PhoneId");

                    b.HasIndex("TitleClientUserId");

                    b.HasIndex("TitleVersionId");

                    b.ToTable("userphoneconsents");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineRequestAudit", b =>
                {
                    b.Property<Guid?>("SessionId")
                        .HasColumnName("sessionid");

                    b.Property<string>("RequestId")
                        .HasColumnName("requestid");

                    b.Property<int?>("CanFulfill")
                        .HasColumnName("canfulfill");

                    b.Property<string>("ClientRequestText")
                        .HasColumnName("responsebody");

                    b.Property<string>("ClientResponseText")
                        .HasColumnName("requestbody");

                    b.Property<string>("EngineError")
                        .HasColumnName("engineerror");

                    b.Property<Guid?>("Id")
                        .IsRequired()
                        .HasColumnName("id");

                    b.Property<float?>("IntentConfidence")
                        .HasColumnName("intentconfidence");

                    b.Property<string>("IntentName")
                        .HasColumnName("intentname");

                    b.Property<string>("MappedNode")
                        .HasColumnName("mappednode");

                    b.Property<string>("PostNodeActionLog")
                        .HasColumnName("postnodeactionlog");

                    b.Property<string>("PreNodeActionLog")
                        .HasColumnName("prenodeactionlog");

                    b.Property<long>("ProcessDuration")
                        .HasColumnName("processduration");

                    b.Property<string>("RawText")
                        .HasColumnName("rawtext");

                    b.Property<Dictionary<string, string>>("RequestAttributes")
                        .HasColumnName("requestattributes");

                    b.Property<int>("RequestType")
                        .HasColumnName("requesttype");

                    b.Property<string>("ResponseConversionError")
                        .HasColumnName("responseconversionerror");

                    b.Property<DateTime>("SelectionTime")
                        .HasColumnName("selectiontime");

                    b.Property<string>("SlotFulFillmentJson")
                        .HasColumnName("slotfulfillment")
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, string>>("Slots")
                        .HasColumnName("slots");

                    b.HasKey("SessionId", "RequestId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("engine_requestaudit");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineSession", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnName("id");

                    b.Property<Guid>("DeploymentId")
                        .HasColumnName("deploymentid");

                    b.Property<DateTime?>("LastAccessedDate")
                        .HasColumnName("lastaccesseddate");

                    b.Property<string>("Locale")
                        .HasColumnName("userlocale")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<Dictionary<string, string>>("SessionAttributes")
                        .HasColumnName("sessionattributes");

                    b.Property<string>("SessionId")
                        .HasColumnName("sessionid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startdate");

                    b.Property<Guid>("TitleUserId")
                        .HasColumnName("titleuserid");

                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("TitleUserId");

                    b.ToTable("engine_session");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("AllSent")
                        .HasColumnName("allsent");

                    b.Property<Guid?>("ConsentId")
                        .HasColumnName("consentid");

                    b.Property<Guid?>("EngineRequestId")
                        .HasColumnName("enginerequestid");

                    b.Property<Guid?>("SmsFromNumberId")
                        .HasColumnName("smsfromnumberid");

                    b.Property<int?>("SmsProvider")
                        .HasColumnName("smsprovider");

                    b.Property<Guid?>("SmsToNumberId")
                        .HasColumnName("smstonumberid");

                    b.Property<Guid?>("TitleUserId")
                        .IsRequired()
                        .HasColumnName("titleclientid");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SmsFromNumberId");

                    b.HasIndex("SmsToNumberId");

                    b.ToTable("outbound_batches");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessageLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ExtendedStatus")
                        .HasColumnName("extendedstatus");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnName("httpstatus");

                    b.Property<bool?>("IsException")
                        .HasColumnName("isexception");

                    b.Property<DateTime>("LogTime")
                        .HasColumnName("logtime");

                    b.Property<Guid>("OutboundMessageId")
                        .HasColumnName("outboundmessageid");

                    b.Property<long?>("ProviderSendDuration")
                        .HasColumnName("providersendduration");

                    b.Property<int>("SendStatus")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("OutboundMessageId");

                    b.ToTable("outboundmessage_logs");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .HasColumnName("message");

                    b.Property<Guid>("OutboundBatchRecordId")
                        .HasColumnName("outboundbatchrecordid");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnName("providermessageid");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<Dictionary<string, string>>("Tags")
                        .HasColumnName("tags");

                    b.HasKey("Id");

                    b.ToTable("outbound_messages");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitle", "Title")
                        .WithMany("TitleUsers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersion", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitle", "Title")
                        .WithMany("Versions")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.DataTitleVersionDeployment", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleVersion", "Version")
                        .WithMany("VersionDeployments")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "Phone")
                        .WithMany("ConsentRecords")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleClientUser", "TitleUser")
                        .WithMany("TitleUserPhones")
                        .HasForeignKey("TitleClientUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleVersion", "TitleVersion")
                        .WithMany("PhoneConsentRecords")
                        .HasForeignKey("TitleVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineRequestAudit", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.EngineSession")
                        .WithMany("Selections")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.EngineSession", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataTitleClientUser")
                        .WithMany("Sessions")
                        .HasForeignKey("TitleUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Data.UserPhoneConsent", "Consent")
                        .WithMany("OutboundMessageBatches")
                        .HasForeignKey("ConsentId");

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "SentFromPhone")
                        .WithMany("SentFromSmsBatches")
                        .HasForeignKey("SmsFromNumberId");

                    b.HasOne("Whetstone.StoryEngine.Models.Data.DataPhone", "SentToPhone")
                        .WithMany("SentToSmsBatches")
                        .HasForeignKey("SmsToNumberId");
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessageLogEntry", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload")
                        .WithMany("Results")
                        .HasForeignKey("OutboundMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Whetstone.StoryEngine.Models.Messaging.OutboundMessagePayload", b =>
                {
                    b.HasOne("Whetstone.StoryEngine.Models.Messaging.OutboundBatchRecord")
                        .WithMany("Messages")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
