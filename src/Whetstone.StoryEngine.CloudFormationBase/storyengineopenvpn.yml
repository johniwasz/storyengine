AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Automate deployment of OpenVPN Access Server with the following features:
  * Custom VPC CIDR
  * Security Groups
  * Use of NACLs
  * VPC Flow Logs
  * EC2 Systems Manager (SSM) Ready

# Help for CloudFormation Metadata
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC NETWORKING
        Parameters:
          - VPCCIDR
      - Label:
          default: Environment Key Stack
        Parameters:
          - EnvironmentStack
      - Label:
          default: OpenVPN AS INSTANCE
        Parameters:
          - InstanceSize
          - KeyName
      - Label:
          default: SECURITY & MONITORING
        Parameters:
          - OpenVPNASAdminUser
          - SSMSecretString
          - VPCFlowLogRetention
    ParameterLabels:
      VPCCIDR:
        default: Custom VPC CIDR
      EnvironmentStack:
        default: Environment Key Stack
      InstanceSize:
        default: Instance Size
      KeyName:
        default: EC2 Key Pair
      OpenVPNASAdminUser:
        default: OpenVPN AS Admin Username
      SSMSecretString:
        default: AWS Parameter Store Name (OpenVPN AS Admin Password)
      VPCFlowLogRetention:
        default: VPC Flow Log Retention.
# Help for CloudFormation Parameters
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  ParentVpcStack:
    Type: String
    Default: WhetstoneVpc-Dev
    Description: The name of the stack that created the VPC environment.
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'

  EnvironmentStack:
    Type: String
    Default: WhetstoneKey-Dev
    Description: The name of the stack that created the environment key.
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'

  VPCCIDR:
    Description: Enter a custom CIDR for your OpenVPN AS VPC
    Type: String
    Default: 10.100.96.0/20
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  InstanceSize:
    Description: Choose an instance size. Deafult is the AWS Free Tier eligible t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge

  KeyName:
    Description: REQUIRED - Select an EXISTING EC2 key pair to launch this OpenVPN AS instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: You must choose the name of an existing EC2 KeyPair

  OpenVPNASAdminUser:
    Description: Minimum of 4 characters. Avoid using the default 'openvpnas' username.
    Type: String
    MinLength: 4
    MaxLength: 50
    Default: ChangeMe
    AllowedPattern: '([A-Za-z0-9-]*)'
    ConstraintDescription: Name must only contain alphanumeric characters between 4 and 50 characters.

  SSMSecretString:
    Description: OPTIONAL - Enter the name of your AWS Parameter Store secret string for the web admin password. Otherwise the default login will be 'ChangeMePlease' so make sure to change the password after logging into the Web Admin console.
    Type: AWS::SSM::Parameter::Name
  VPCFlowLogRetention:
    # Information source: Ref: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records
    Description: Select the number of days to retain VPC Flow Logs.
    Type: Number
    Default: '7'
    AllowedValues:
      - '7'
      - '14'
      - '30'
      - '60'
      - '120'
      - '150'
      - '180'
      - '365'
      - '400'
      - '545'
      - '731'
      - '1827'
      - '3653'
# Help for CloudFormation Mappings
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  RegionMap:
    # Asia Pacific (Mumbai)
    ap-south-1:
      BYOLAMI: ami-fca0de93
    # EU (London)
    eu-west-2:
      BYOLAMI: ami-022f3966
    # EU (Ireland)
    eu-west-1:
      BYOLAMI: ami-015fbb78
    # Asia Pacific (Seoul)
    ap-northeast-2:
      BYOLAMI: ami-d4459aba
    # Asia Pacific (Tokyo)
    ap-northeast-1:
      BYOLAMI: ami-eb9c8f8c
    # South America (SÃ£o Paulo)
    sa-east-1:
      BYOLAMI: ami-349af058
    # Canada (Central)
    ca-central-1:
      BYOLAMI: ami-9d912ef9
    # Asia Pacific (Singapore)
    ap-southeast-1:
      BYOLAMI: ami-76ef6715
    # Asia Pacific (Sydney)
    ap-southeast-2:
      BYOLAMI: ami-f981929a
    # EU (Frankfurt)
    eu-central-1:
      BYOLAMI: ami-906ccdff
    # US East (N. Virginia)
    us-east-1:
      BYOLAMI: ami-07a8d85046c8ecc99
    # US East (Ohio)
    us-east-2:
      BYOLAMI: ami-04f63e8f7a845159a
    # US West (N. California)
    us-west-1:
      BYOLAMI: ami-ee89a58e
    # US West (Oregon)
    us-west-2:
      BYOLAMI: ami-0403a87506d0fbbcd
# If using China or GovCloud will need to find your AMI.
#    # China Beijing
#    cn-north-1:
#      BYOLAMI: ami-XXXXXXXX
#    # AWS GovCloud
#    us-gov-west-1:
#      BYOLAMI: ami-XXXXXXXX

Resources:
  # S3 VPC Endpoints to get Ubuntu updates via AWS Internal network and save $$$ on network bandwidth.
  1aVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      CidrBlock: !Ref VPCCIDR
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - publicvpn
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - publicvpn
  1aPublicSubnetAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref OpenVPNASInstance
  1aInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-InternetGateway' }
  # Keep Web Admin Console locked down to 443 only.
  OpenVPNASAdminConsoleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS Admin Console
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock' }
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - openvpn-webconsole
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }

  SSHOpenVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS via SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock' }
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - openvpn-ssh
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
  # Ideally this would be locked down by source IP but if on mobile or public IP served via DHCP, no choice.
  OpenVPNVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPN Access to OpenVPN AS
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - openvpn-connection
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - {
                    'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                  }
                - openvpn-nacl
  InboundPublicSSHNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  InboundPublicHTTPNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  InboundPublicHTTPSNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  InboundPublicOpenVPNNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 1194
        To: 1194
      Protocol: 17
      RuleAction: allow
      RuleNumber: 130
  InboundPublicRepliesNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PublicNetworkAcl
      # Many type of clients will have replies so use this range.
      # Help for Ephemeral ports and how to use:
      # http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 140
  InboundICMPPublicRepliesNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 8
        To: 0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 150
  OutboundPublicSSHNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  OutboundPublicHTTPNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  OutboundPublicHTTPSNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  OutboundPublicOpenVPNNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 1194
        To: 1194
      Protocol: 17
      RuleAction: allow
      RuleNumber: 130
  PublicSSMOutboundRepliesNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: 32768
        # 6100 will not work for this AMI.
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 140
  PublicICMPOutboundRepliesNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        # Reference: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-codes-8
        From: 8
        To: 0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 150
  PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  # Help for CloudFormation EC2 Instance
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  OpenVPNASInstance:
    DependsOn:
      - OpenVPNInstanceRole
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            # Annoying that there is no amazon-ssm-agent package for Ubuntu so have to install like this.
            a:
              command: 'wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb'
              cwd: '/tmp'
            b:
              command: 'dpkg -i amazon-ssm-agent.deb'
              cwd: '/tmp'
            c:
              command: 'systemctl enable amazon-ssm-agent'
            d:
              command: 'rm amazon-ssm-agent.deb'
              cwd: '/tmp'
            # These are the OpenVPN AS command-line customizations. From within the instance or using the AWS Run Command you can see what is set by using the command: /usr/local/openvpn_as/scripts/sacli ConfigQuery
            e:
              command: '/usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min --value 1.2 ConfigPut'
            f:
              command: '/usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min_strict --value true ConfigPut'
            g:
              command: '/usr/local/openvpn_as/scripts/sacli --key vpn.server.tls_version_min --value 1.2 ConfigPut'
            h:
              command: '/usr/local/openvpn_as/scripts/sacli --key cs.tls_version_min --value 1.2 ConfigPut'
            i:
              command: '/usr/local/openvpn_as/scripts/sacli --key cs.tls_version_min_strict --value true ConfigPut'
            # OpenVPN AS supported ciphers listed here: https://openvpn.net/index.php/access-server/docs/admin-guides/437-how-to-change-the-cipher-in-openvpn-access-server.html
            j:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.client.config_text --value 'cipher AES-256-CBC' ConfigPut"
            k:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.server.config_text --value 'cipher AES-256-CBC' ConfigPut"
            # Changes require a restart.
            l:
              command: '/usr/local/openvpn_as/scripts/sacli start'
            # This is where the Parameter Store secure string is passed and changes the insecure 'ChangeMePlease' default password. However, if using a default SSM KMS key the instance role and IAM action get-parameters will allow decryption of the secure string so either remove SSH access and/or remove the IAM policy action.
            m:
              command: !Sub |
                /usr/local/openvpn_as/scripts/ovpnpasswd -u ${OpenVPNASAdminUser} -p `aws ssm get-parameters --region ${AWS::Region} --names ${SSMSecretString} --with-decryption --output text | cut -f4`
    Properties:
      InstanceType:
        Ref: InstanceSize
      IamInstanceProfile:
        Ref: OpenVPNInstanceProfile
      KeyName:
        Ref: KeyName
      SourceDestCheck: false
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', BYOLAMI]
      SecurityGroupIds:
        - Ref: OpenVPNASAdminConsoleSG
        - Ref: SSHOpenVPNASSG
        - Ref: OpenVPNVPNASSG
      SubnetId:
        Ref: 1aVPCPublicSubnet
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackName'
        - Key: Purpose
          Value: { 'Fn::ImportValue': !Sub '${EnvironmentStack}-Purpose' }
        - Key: Name
          Value: !Join
            - '-'
            - - {
                  'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                }
              - openvpn
              - !Ref 'AWS::StackName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt -y update && apt -y upgrade
          apt-get -y install python-pip
          pip install awscli
          admin_user=${OpenVPNASAdminUser}
          admin_pw=ChangeMePlease
          reroute_gw=1
          reroute_dns=1
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cfn-init -v --stack ${AWS::StackName} --resource OpenVPNASInstance --region ${AWS::Region}
  OpenVPNInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ''
          - - Ref: AWS::Region
            - '-'
            - Fn::Join:
                - ''
                - - {
                      'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                    }
                  - openvpn-instance-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - {
            'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentKeyReaderPolicyArn',
          }
  OpenVPNInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: OpenVPNInstanceRole
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ''
          - - Ref: AWS::Region
            - '-'
            - Fn::Join:
                - ''
                - - {
                      'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName',
                    }
                  - openvpn-flowlogs-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
  FlowLogsRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - ''
          - - { 'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName' }
            - openvpn-flowlogs-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: '*'
      Roles:
        - Ref: VPCFlowLogsRole
  VPCFlowLogsGroup:
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - { 'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName' }
            - openvpn-flowlogs-group
      RetentionInDays:
        Ref: VPCFlowLogRetention
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - VPCFlowLogsRole
          - Arn
      LogGroupName:
        Ref: VPCFlowLogsGroup
      ResourceId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
      ResourceType: VPC
      TrafficType: ALL
  CloudWatchMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - ''
          - - { 'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName' }
            - openvpn-cloudwatch-metrics
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - cloudwatch:PutMetricData
            Resource:
              - '*'
          - Sid: Stmt1454327816000
            Effect: Allow
            Action:
              - ec2:DescribeTags
            Resource:
              - '*'
      Roles:
        - Ref: OpenVPNInstanceRole
  InstanceCWLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - ''
          - - { 'Fn::ImportValue': !Sub '${EnvironmentStack}-EnvironmentName' }
            - openvpn-cloudwatch-logs
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - cloudwatch:PutMetricData
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: '*'
      Roles:
        - Ref: OpenVPNInstanceRole
# Help for CloudFormation Outputs
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  OpenVpnAdminUrl:
    Description: Admin Login URL
    Value: !Join ['', ['https://', Ref: EIP, '/admin']]

  VPNPublicCIDR:
    Description: VPN Public CIDR
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPNPublicCIDR'

  OpenAccessSecurityGroup:
    Description: Security group that allows access to the VPN
    Value: !Ref OpenVPNVPNASSG
    Export:
      Name: !Sub '${AWS::StackName}-OpenVPNVPNASSG'
