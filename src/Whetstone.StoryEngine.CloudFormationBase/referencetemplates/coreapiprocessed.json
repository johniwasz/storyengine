{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Outputs": {
        "OptionsMethodId": {
            "Value": {
                "Ref": "AdminApiOptionsMethod"
            }
        },
        "CoreAPIRole": {
            "Description": "ARN of the role used by this API",
            "Value": {
                "Fn::GetAtt": [
                    "CoreApiRole",
                    "Arn"
                ]
            }
        },
        "CoreUsagePlanID": {
            "Value": {
                "Ref": "UsagePlanKey"
            }
        },
        "PutMethodId": {
            "Value": {
                "Ref": "AdminApiPutMethod"
            }
        },
        "PostMethodId": {
            "Value": {
                "Ref": "AdminApiPostMethod"
            }
        },
        "DeleteMethodId": {
            "Value": {
                "Ref": "AdminApiDeleteMethod"
            }
        },
        "CoreApiID": {
            "Value": {
                "Fn::Sub": "${ServerlessRestApi}"
            }
        },
        "GetMethodId": {
            "Value": {
                "Ref": "AdminApiGetMethod"
            }
        },
        "CoreStoryKeyID": {
            "Value": {
                "Ref": "CoreStoryKey"
            }
        },
        "ApiURL": {
            "Value": {
                "Fn::Sub": "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
            }
        }
    },
    "Parameters": {
        "DatabaseStack": {
            "Default": "WhetstoneDatabase-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create the database or provide a security group. Example: WhetstoneDBSecurityGroup-Dev"
        },
        "BucketStack": {
            "Default": "WhetstoneBucket-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create the Story Engine bucket. Example: WhetstoneBucket-Dev"
        },
        "LambdaNetSerializerDebug": {
            "Default": "false",
            "Type": "String",
            "Description": "Indicates if the lambda serialization is enabled or not.",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "ElasticCacheStack": {
            "Default": "WhetstoneCache-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create the elastic cache. Example: WhetstoneCache-Dev"
        },
        "KeyStack": {
            "Default": "WhetstoneKey-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create environment key for decryption. Example: WhetstoneKey-Dev"
        },
        "ParentVpcStack": {
            "Default": "WhetstoneVpc-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create the VPN and/or subnets. Example: WhetstoneVpc-Dev"
        },
        "AdminDatabaseUserName": {
            "Default": "lambda_proxy",
            "Type": "String",
            "Description": "Database user with rights required to update core application tables"
        },
        "PolicyStack": {
            "Default": "WhetstoneSharedPolicies-Dev",
            "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$",
            "Type": "String",
            "Description": "Name of stack used to create supplemental policies. Example: WhetstoneDBSecurityGroup-Dev"
        }
    },
    "Description": "An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",
    "Resources": {
        "AdminApiDeleteMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "ResourceId": {
                    "Ref": "ProxyResource"
                },
                "AuthorizationType": "NONE",
                "OperationName": "Core API Post Request",
                "Integration": {
                    "IntegrationHttpMethod": "DELETE",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                    },
                    "ConnectionType": "INTERNET"
                },
                "ApiKeyRequired": true,
                "HttpMethod": "DELETE"
            },
            "DependsOn": [
                "AspNetCoreFunction",
                "ServerlessRestApi"
            ]
        },
        "AspNetCoreFunctionPutResourcePermissionProd": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/api/*",
                        {
                            "__Stage__": "Prod",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AdminApiGetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "ResourceId": {
                    "Ref": "ProxyResource"
                },
                "AuthorizationType": "NONE",
                "OperationName": "Core API GET Request",
                "Integration": {
                    "IntegrationHttpMethod": "GET",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                    },
                    "ConnectionType": "INTERNET"
                },
                "ApiKeyRequired": true,
                "HttpMethod": "GET"
            },
            "DependsOn": [
                "AspNetCoreFunction",
                "ServerlessRestApi"
            ]
        },
        "AdminApiPutMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "ResourceId": {
                    "Ref": "ProxyResource"
                },
                "AuthorizationType": "NONE",
                "OperationName": "Core API Put Request",
                "Integration": {
                    "IntegrationHttpMethod": "PUT",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                    },
                    "ConnectionType": "INTERNET"
                },
                "ApiKeyRequired": true,
                "HttpMethod": "PUT"
            },
            "DependsOn": [
                "AspNetCoreFunction",
                "ServerlessRestApi"
            ]
        },
        "ServerlessRestApiProdStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ServerlessRestApiDeploymentccfa3b79be"
                },
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "StageName": "Prod"
            }
        },
        "ApiResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "PathPart": "api",
                "ParentId": {
                    "Fn::GetAtt": [
                        "ServerlessRestApi",
                        "RootResourceId"
                    ]
                }
            }
        },
        "AspNetCoreFunctionDeleteResourcePermissionTest": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/api/*",
                        {
                            "__Stage__": "*",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreFunctionPostResourcePermissionProd": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/api/*",
                        {
                            "__Stage__": "Prod",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreFunctionGetResourcePermissionTest": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api/*",
                        {
                            "__Stage__": "*",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreFunctionPostResourcePermissionTest": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/api/*",
                        {
                            "__Stage__": "*",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "ServerlessRestApiDeploymentccfa3b79be": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "Description": "RestApi deployment id: ccfa3b79bef12495c8d44c9ef2e4a91099454c6f",
                "StageName": "Stage"
            }
        },
        "AspNetCoreFunctionOptionsResourcePermissionTest": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/OPTIONS/api/*",
                        {
                            "__Stage__": "*",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreFunctionOptionsResourcePermissionProd": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/OPTIONS/api/*",
                        {
                            "__Stage__": "Prod",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "AdminApiPostMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "ResourceId": {
                    "Ref": "ProxyResource"
                },
                "AuthorizationType": "NONE",
                "OperationName": "Core API Post Request",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                    },
                    "ConnectionType": "INTERNET"
                },
                "ApiKeyRequired": true,
                "HttpMethod": "POST"
            },
            "DependsOn": [
                "AspNetCoreFunction",
                "ServerlessRestApi",
                "ProxyResource"
            ]
        },
        "AspNetCoreFunctionDeleteResourcePermissionProd": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/api/*",
                        {
                            "__Stage__": "Prod",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "CoreStoryKey": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
                "Enabled": true,
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "For use with the Story Engine Core ",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            },
                            " API"
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "Story Engine Core ",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            },
                            " API Key"
                        ]
                    ]
                }
            }
        },
        "AspNetCoreFunctionPutResourcePermissionTest": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/api/*",
                        {
                            "__Stage__": "*",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "CoreApiRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            },
                            "/"
                        ]
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${PolicyStack}-BootstrapConfigPolicy"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${BucketStack}-BucketWriterPolicy"
                        }
                    },
                    "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Policies": [
                    {
                        "PolicyName": "DbRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": "rds-db:connect",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::Sub": "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:"
                                                },
                                                {
                                                    "Fn::ImportValue": {
                                                        "Fn::Sub": "${PolicyStack}-DatabaseId"
                                                    }
                                                },
                                                {
                                                    "Fn::Sub": "/${AdminDatabaseUserName}"
                                                }
                                            ]
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ]
                }
            }
        },
        "UsagePlanKey": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
                "KeyType": "API_KEY",
                "KeyId": {
                    "Ref": "CoreStoryKey"
                },
                "UsagePlanId": {
                    "Ref": "CoreStoryApiUsage"
                }
            },
            "DependsOn": [
                "CoreStoryKey",
                "CoreStoryApiUsage"
            ]
        },
        "AdminApiOptionsMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "ResourceId": {
                    "Ref": "ProxyResource"
                },
                "AuthorizationType": "NONE",
                "OperationName": "Core API Options Request",
                "Integration": {
                    "IntegrationHttpMethod": "OPTIONS",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                    },
                    "ConnectionType": "INTERNET"
                },
                "ApiKeyRequired": true,
                "HttpMethod": "OPTIONS"
            },
            "DependsOn": [
                "AspNetCoreFunction",
                "ServerlessRestApi"
            ]
        },
        "ProxyResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ServerlessRestApi"
                },
                "PathPart": "{proxy+}",
                "ParentId": {
                    "Ref": "ApiResource"
                }
            }
        },
        "AspNetCoreFunctionGetResourcePermissionProd": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api/*",
                        {
                            "__Stage__": "Prod",
                            "__ApiId__": {
                                "Ref": "ServerlessRestApi"
                            }
                        }
                    ]
                }
            }
        },
        "CoreStoryApiUsage": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "Properties": {
                "UsagePlanName": {
                    "Fn::Join": [
                        "",
                        [
                            "Core API ",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            },
                            " Usage Plan"
                        ]
                    ]
                },
                "ApiStages": [
                    {
                        "ApiId": {
                            "Fn::Sub": "${ServerlessRestApi}"
                        },
                        "Stage": {
                            "Fn::Sub": "${ServerlessRestApiProdStage}"
                        }
                    }
                ],
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "For use with the Core ",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            },
                            " API"
                        ]
                    ]
                }
            },
            "DependsOn": "ServerlessRestApi"
        },
        "AspNetCoreFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Layers": [
                    "arn:aws:lambda:us-east-1:940085449815:layer:EngineCommon:6"
                ],
                "Code": {
                    "S3Bucket": "whetstone-utility",
                    "S3Key": "Whetstone.StoryEngine.CoreApi.Dev/Whetstone.StoryEngine.CoreApi-636966552392622139.zip"
                },
                "Description": "Function handles the Core API administration functions, like updating story titles, nodes, etc.",
                "VpcConfig": {
                    "SubnetIds": [
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ParentVpcStack}-SubnetAPrivate"
                            }
                        },
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ParentVpcStack}-SubnetBPrivate"
                            }
                        },
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ParentVpcStack}-SubnetCPrivate"
                            }
                        }
                    ],
                    "SecurityGroupIds": [
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ElasticCacheStack}-ElasticCacheSecurityGroup"
                            }
                        },
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${DatabaseStack}-SecurityGroup"
                            }
                        },
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ParentVpcStack}-SSMSecurityGroup"
                            }
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": "SAM",
                        "Key": "lambda:createdBy"
                    }
                ],
                "MemorySize": 1024,
                "Environment": {
                    "Variables": {
                        "LAMBDA_NET_SERIALIZER_DEBUG": {
                            "Ref": "LambdaNetSerializerDebug"
                        },
                        "BOOTSTRAP": {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${PolicyStack}-BootstrapParameter"
                            }
                        },
                        "DBUSERTYPE": "AdminUser",
                        "DOTNET_SHARED_STORE": "/opt/dotnetcore/store/"
                    }
                },
                "Handler": "Whetstone.StoryEngine.CoreApi::Whetstone.StoryEngine.CoreApi.LambdaEntryPoint::FunctionHandlerAsync",
                "Role": {
                    "Fn::GetAtt": [
                        "CoreApiRole",
                        "Arn"
                    ]
                },
                "Timeout": 30,
                "Runtime": "dotnetcore2.1",
                "FunctionName": {
                    "Fn::Join": [
                        "",
                        [
                            "WhestoneCoreApi",
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${KeyStack}-EnvironmentName"
                                }
                            }
                        ]
                    ]
                }
            }
        },
        "ServerlessRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Body": {
                    "info": {
                        "version": "1.0",
                        "title": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    "paths": {
                        "/api/{proxy+}": {
                            "put": {
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "type": "aws_proxy",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                                    }
                                },
                                "responses": {}
                            },
                            "post": {
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "type": "aws_proxy",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                                    }
                                },
                                "responses": {}
                            },
                            "get": {
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "type": "aws_proxy",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                                    }
                                },
                                "responses": {}
                            },
                            "options": {
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "type": "aws_proxy",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                                    }
                                },
                                "responses": {}
                            },
                            "delete": {
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "type": "aws_proxy",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations"
                                    }
                                },
                                "responses": {}
                            }
                        }
                    },
                    "swagger": "2.0"
                }
            }
        }
    }
}