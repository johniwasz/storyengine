AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: 'CloudFormation Template to create Aurora Serverless Postgress Cluster'

###############################################################################
# Parameters
###############################################################################

Parameters:
  ParentVpcStack:
    Description: >-
      Name of stack used to create the VPN and/or subnets. Example:
      WhetstoneVpc-Dev
    Type: String
    Default: WhetstoneVpc-Dev
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'
  EnvironmentKeyStack:
    Type: String
    Default: WhetstoneKey-Dev
    Description: Root environment stack that defines the environment key and purpose.
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: '5432'
    ConstraintDescription: 'Must be in the range [1115-65535]'
    MinValue: '1115'
    MaxValue: '65535'

  DBUsername:
    Description: Database master username
    Type: String
    Default: whetstoneadmin
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 16 characters

  DBEngineVersion:
    Description: Select Database Engine Version (Current Postgres max version is 10.7)
    Type: String
    Default: 10.7
    AllowedValues:
      - 9.6.8
      - 9.6.9
      - 10.4
      - 10.5
      - 10.6
      - 10.7
      - 11.1
      - 11.2
      - 11.4

  LambdaBootStrapS3Key:
    Description: Optional. Specify S3 key for e.g. lambda/dbbootstrap.zip where Lambda DB Bootstrap Python 3.6 script is stored. E.g. cloud-formation/dbbootstrap.zip
    Default: ''
    Type: String

  ###########################################################################
  # Mandatory tags that will be added to all resources that support tags
  ###########################################################################

  ServiceOwnersEmailContact:
    Type: String
    Default: john@whetstonetechnologies.io
    Description: The ServiceOwnersEmailContact tag is used to designate business owner(s) email address associated with the given AWS resource for sending outage or maintenance notifications
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: provide a valid email address.

  NotificationList:
    Type: String
    Default: john@whetstonetechnologies.io
    Description: The Email notification list is used to configure a SNS topic for sending cloudwatch alarm and RDS Event notifications
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: provide a valid email address.

###############################################################################
# Parameter groups
###############################################################################

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DB Parameters
        Parameters:
          - DBPort
          - DBUsername
          - DBEngineVersion
          - NotificationList
          - LambdaBootStrapS3Key
      - Label:
          default: Networking
        Parameters:
          - ParentVpcStack
      - Label:
          default: Mandatory Tags
        Parameters:
          - ServiceOwnersEmailContact

###############################################################################
# Mappings
###############################################################################

Mappings:
  DBFamilyMap:
    '10.4':
      'family': 'aurora-postgresql10'
    '10.5':
      'family': 'aurora-postgresql10'
    '10.6':
      'family': 'aurora-postgresql10'
    '10.7':
      'family': 'aurora-postgresql10'

###############################################################################
# Conditions
###############################################################################
Conditions:
  DoDBBootStrap: !Not [!Equals [!Ref LambdaBootStrapS3Key, '']]

###############################################################################
# Resources
###############################################################################

Resources:
  MonitoringIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'monitoring.rds.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DBBootStrapLambdaRole:
    Type: AWS::IAM::Role
    Condition: DoDBBootStrap
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - {
            'Fn::ImportValue': !Sub '${EnvironmentKeyStack}-BucketReaderPolicy',
          }
      Policies:
        - PolicyName: 'secretaccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Ref AuroraMasterSecret

  DBSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationList
          Protocol: email

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetAPrivate' }
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetBPrivate' }
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetCPrivate' }

  DBClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId:
            {
              'Fn::ImportValue': !Sub '${ParentVpcStack}-SecretRotationLambdaSecurityGroup',
            }
          Description: 'Access to Lambda Security Group'
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVpcStack}-VPC' }
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PostgreSQLSecurityGroup'

  DBParamGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub 'PG Database Instance Parameter Group for Stack ${AWS::StackName}'
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, 'family']
      Parameters:
        shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
        log_statement: 'ddl'
        log_connections: '1'
        log_disconnections: '1'
        log_lock_waits: '1'
        log_min_duration_statement: '5000'
        auto_explain.log_min_duration: '5000'
        auto_explain.log_verbose: '1'
        log_rotation_age: '1440'
        log_rotation_size: '102400'
        rds.log_retention_period: '10080'
        random_page_cost: '1'
        track_activity_query_size: '16384'
        idle_in_transaction_session_timeout: '7200000'
        statement_timeout: '7200000'
        search_path: '"$user",public'

  DatabaseKMSCMK:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'

  AuroraMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        !Join [
          '/',
          [
            { 'Fn::ImportValue': !Sub '${EnvironmentKeyStack}-Purpose' },
            'pg',
            !Ref 'AWS::StackName',
          ],
        ]
      Description:
        !Join [
          '',
          [
            'PostgreSQL Master User Secret ',
            'for CloudFormation Stack ',
            !Ref 'AWS::StackName',
          ],
        ]
      Tags:
        - Key: Purpose
          Value: !ImportValue
            'Fn::Sub': '${EnvironmentKeyStack}-Purpose'
        - Key: DatabaseEngine
          Value: 'PostgreSQL'
        - Key: StackID
          Value: !Ref 'AWS::StackId'
      GenerateSecretString:
        SecretStringTemplate:
          !Join ['', ['{"username": "', !Ref DBUsername, '"}']]
        GenerateStringKey: 'password'
        ExcludeCharacters: '"@/\'
        PasswordLength: 16

  SecretPosgreSQLInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraMasterSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster

  DatabaseSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref AuroraMasterSecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Deny'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'secretsmanager:DeleteSecret'
            Resource: '*'

  CreateSecretRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
      Policies:
        - PolicyName: 'AdditionalPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:DescribeStackResources'
                  - 'cloudformation:DeleteStack'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'lambda:DeleteFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource: 'arn:aws:lambda:*:*:function:SecretsManager*'

  CreateSecretRotationLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function
          import cfnresponse
          import boto3

          def lambda_handler(event, context):
              slrepoclient = boto3.client('serverlessrepo')
              cfclient = boto3.client('cloudformation')
              lambdaclient = boto3.client('lambda')
              SecretsManagerEndpoint = event['ResourceProperties']['SecretsManagerEndpoint']
              SecretRotationLambdaFnName = event['ResourceProperties']['SecretRotationLambdaFnName']
              SecretRotationLambdaStackName = event['ResourceProperties']['SecretRotationLambdaStackName']
              SubnetIds = event['ResourceProperties']['SubnetIds']
              SecretRotationLambdaSG = event['ResourceProperties']['SecretRotationLambdaSG']
              
              responseData = {}
               
              try: 
                  if event['RequestType'] == 'Create':
                      serverlessreporesponse = slrepoclient.create_cloud_formation_change_set(ApplicationId='arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser', 
                      ParameterOverrides=[
                          {
                              'Name': 'endpoint',
                              'Value': SecretsManagerEndpoint
                          },
                          {
                              'Name': 'functionName',
                              'Value': SecretRotationLambdaFnName
                          },
                      ],
                      StackName=SecretRotationLambdaStackName)
                      waiter = cfclient.get_waiter('change_set_create_complete')
                      waiter.wait(ChangeSetName=serverlessreporesponse['ChangeSetId'],WaiterConfig={'Delay': 10,'MaxAttempts': 60})
                      
                      cloudformationresponse = cfclient.execute_change_set(ChangeSetName=serverlessreporesponse['ChangeSetId'])
                      waiter = cfclient.get_waiter('stack_create_complete')
                      waiter.wait(StackName=serverlessreporesponse['StackId'],WaiterConfig={'Delay': 10,'MaxAttempts': 60})
                      
                      lambdaresponse = lambdaclient.add_permission(FunctionName=SecretRotationLambdaFnName,StatementId='SecretsManagerAccess',Action='lambda:InvokeFunction',Principal='secretsmanager.amazonaws.com')
                      lambdaresponse = lambdaclient.update_function_configuration(FunctionName=SecretRotationLambdaFnName,VpcConfig={'SubnetIds': SubnetIds,'SecurityGroupIds': SecretRotationLambdaSG})
                      
                      responseData['Data'] = "SUCCESS: Secret Rotation Lambda created successfully."
                      responseData['SecretRotationLambdaARN'] = lambdaclient.get_function(FunctionName=SecretRotationLambdaFnName)['Configuration']['FunctionArn']
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "None")               
                  elif event['RequestType'] == 'Delete':
                      SecretRotationLambdaStackName = cfclient.describe_stack_resources(PhysicalResourceId=SecretRotationLambdaFnName,LogicalResourceId='SecretsManagerRDSPostgreSQLRotationSingleUser')['StackResources'][0]['StackName']
                      response = cfclient.delete_stack(StackName=SecretRotationLambdaStackName)
                      waiter = cfclient.get_waiter('stack_delete_complete')
                      waiter.wait(StackName='string',WaiterConfig={'Delay': 10,'MaxAttempts': 60})
                      
                      responseData['Data'] = "SUCCESS: Stack delete complete."
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "None")
                  else:
                      responseData['Data'] = "{} is unsupported stack operation for this lambda function.".format(event['RequestType'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "None")
              except Exception as e:
                  print(e)
                  responseData['Data'] = "ERROR: Exception encountered!"
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "None")
      Description: >-
        Create Secret Rotation Lambda function using AWS Serverless Application Repository with template provided by AWS Secrets Manager
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CreateSecretRotationLambdaRole.Arn
      Runtime: python2.7
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          !Split [
            ',',
            {
              'Fn::ImportValue': !Sub '${ParentVpcStack}-SecretRotationLambdaSecurityGroup',
            },
          ]
        SubnetIds:
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetAPrivate' }
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetBPrivate' }
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetCPrivate' }

  CreateSecretRotationLambdaFnTrigger:
    Type: Custom::LambdaAPGSecretsManager
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'CreateSecretRotationLambdaFn.Arn'
      SecretsManagerEndpoint: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
      SecretRotationLambdaFnName: !Sub 'SecretsManager-SecretRotationFn-${AWS::StackName}'
      SecretRotationLambdaStackName: !Sub '${AWS::StackName}-SecretRotationLambdaStack'
      SubnetIds:
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetAPrivate' }
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetBPrivate' }
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetCPrivate' }
      SecretRotationLambdaSG:
        !Split [
          ',',
          {
            'Fn::ImportValue': !Sub '${ParentVpcStack}-SecretRotationLambdaSecurityGroup',
          },
        ]

  PostgreSQLSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn:
      - SecretPosgreSQLInstanceAttachment
      - AuroraDBCluster
    Properties:
      SecretId: !Ref AuroraMasterSecret
      RotationLambdaARN: !GetAtt CreateSecretRotationLambdaFnTrigger.SecretRotationLambdaARN
      RotationRules:
        AutomaticallyAfterDays: 30

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Retain
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: !Ref DBEngineVersion
      Port: !Ref DBPort
      MasterUsername:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref AuroraMasterSecret,
            ':SecretString:username}}',
          ],
        ]
      MasterUserPassword:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref AuroraMasterSecret,
            ':SecretString:password}}',
          ],
        ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBClusterSecurityGroup
      EngineMode: serverless
      BackupRetentionPeriod: 14
      DBClusterParameterGroupName: !Ref DBParamGroup
      StorageEncrypted: true
      KmsKeyId:
        { 'Fn::ImportValue': !Sub '${EnvironmentKeyStack}-EnvironmentKeyAlias' }
      Tags:
        - Key: EnvironmentStage
          Value:
            { 'Fn::ImportValue': !Sub '${EnvironmentKeyStack}-EnvironmentName' }
        - Key: ServiceOwnersEmailContact
          Value: !Ref ServiceOwnersEmailContact

  DBBootStrapLambdaFn:
    Condition: DoDBBootStrap
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          {
            'Fn::ImportValue': !Sub '${EnvironmentKeyStack}-S3UtilityBucketBucket',
          }
        S3Key: !Ref LambdaBootStrapS3Key
      Description: >-
        BootStrap newly Created PostgreSQL Database
      Handler: dbbootstrap.handler
      MemorySize: 128
      Role: !GetAtt DBBootStrapLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          !Split [
            ',',
            {
              'Fn::ImportValue': !Sub '${ParentVpcStack}-SecretRotationLambdaSecurityGroup',
            },
          ]
        SubnetIds:
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetAPrivate' }
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetBPrivate' }
          - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetCPrivate' }
      Environment:
        Variables:
          DBHost: !GetAtt 'AuroraDBCluster.Endpoint.Address'
          DBPort: !GetAtt 'AuroraDBCluster.Endpoint.Port'
          DBUser: !Ref DBUsername
          Secret_ARN: !Ref AuroraMasterSecret
          Region_Name: !Ref 'AWS::Region'

  DBBootStrapLambdaFnTrigger:
    Condition: DoDBBootStrap
    Type: Custom::LambdaAPGBootStrap
    DependsOn:
      - AuroraDBCluster
      - PostgreSQLSecretRotationSchedule
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DBBootStrapLambdaFn.Arn'

###############################################################################
# Outputs
###############################################################################
Outputs:
  ClusterEndpoint:
    Description: 'DB Cluster/Writer Endpoint'
    Value: !GetAtt 'AuroraDBCluster.Endpoint.Address'
  Port:
    Description: 'DB Endpoint Port'
    Value: !GetAtt 'AuroraDBCluster.Endpoint.Port'
  DBUsername:
    Description: 'Database master username'
    Value: !Ref DBUsername
  PSQLCommandLine:
    Description: PSQL Command Line
    Value: !Join
      - ''
      - - 'psql --host='
        - !GetAtt 'AuroraDBCluster.Endpoint.Address'
        - ' --port='
        - !GetAtt 'AuroraDBCluster.Endpoint.Port'
        - ' --username='
        - !Ref DBUsername
  DBSecurityGroup:
    Description: Database security Group
    Value: !Ref DBClusterSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
