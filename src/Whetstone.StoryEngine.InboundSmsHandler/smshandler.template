{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Transform":"AWS::Serverless-2016-10-31",
   "Description":"Handles inbound SMS requests.",
   "Parameters":{
        "ApiSecretsStack": {
	      "Description": "Name of stack used to create API Secret settings for Twilio. Example: Whetstone-APISecrets-Dev",
      "Type": "String",
      "Default": "Whetstone-APISecrets-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"

	},
      "KeyStack":{
         "Description":"Name of stack used to create environment key for decryption. Example: WhetstoneKey-Dev",
         "Type":"String",
         "Default":"WhetstoneKey-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "VersionDescription":{
         "Type":"String",
         "Description":"Associate the deployed version with the build",
         "Default":"Out of band"
      },
      "LambdaNetSerializerDebug":{
         "Type":"String",
         "AllowedValues":[
            "true",
            "false"
         ],
         "Description":"Indicates if the lambda serialization is enabled or not.",
         "Default":"false"
      },
      "SlidingExpirationTime":{
         "Type":"Number",
         "Description":"Cache sliding expiration time. Value is in milliseconds.",
         "Default":"9000"
      },
      "CodeDeployRule":{
         "AllowedValues":[
            "AllAtOnce",
            "Linear10PercentEvery1Minute",
            "Linear10PercentEvery2Minutes",
            "Linear10PercentEvery3Minutes",
            "Linear10PercentEvery10Minutes",
            "Canary10Percent5Minutes",
            "Canary10Percent10Minutes"
         ],
         "Default":"Linear10PercentEvery1Minute",
         "Description":"Determine whether or not to use a blue/green deployment when pushing out this lambda",
         "Type":"String"
      },
      "BucketStack":{
         "Description":"Name of stack used to create the Story Engine bucket. Example: WhetstoneBucket-Dev",
         "Type":"String",
         "Default":"WhetstoneBucket-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "CacheStack":{
         "Description":"Name of stack used to create the dynamo db cache table: Whetstone-CacheTable-Dev",
         "Type":"String",
         "Default":"Whetstone-CacheTable-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "QueueStack":{
         "Type":"String",
         "Default":"WhetstoneQueue-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "DynamoTableStack":{
         "Description":"Name of stack used to create dynamodb table stores. Example: Whetstone-DynamoDbStore-Dev",
         "Type":"String",
         "Default":"Whetstone-DynamoDbStore-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "MessageSenderStepFunctionStack":{
         "Description":"Name of stack used to create the audit queue. Example: Whetstone-MessageSender-Dev",
         "Type":"String",
         "Default":"Whetstone-MessageSender-Dev",
         "AllowedPattern":"^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
      },
      "CustomActionLambdaStack":{
         "Description":"Stack that defines lambdas for custom resources",
         "Type":"String",
         "Default":"Whetstone-LambdaCustomActions-Dev"
      },
	"InboundSMSFuncBucket": {
	    "Description": "S3 Bucket of the Inbound SMS Sync Function zip deployment",
	   "Type":"String"
	  },
	"InboundSMSFuncBucketKey": {
	    "Description": "S3 Bucket key of the Inbound SMS Function zip deployment",
	   "Type":"String"
	  }


   },
   "Resources":{
      "KeyPolicyUpdate":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${CustomActionLambdaStack}-KeyPolicyUpdateArn"
               }
            },
            "Key":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${KeyStack}-EnvironmentKeyArn"
               }
            },
            "RoleArn":{
               "Fn::GetAtt":[
                  "SendSmsTaskLambdaRole",
                  "Arn"
               ]
            },
            "GrantType":"EncryptDecrypt"
         }
      },
      "SmsHandlerTask":{
         "Type":"AWS::Serverless::Function",
         "Properties":{
            "Role":{
               "Fn::GetAtt":[
                  "SendSmsTaskLambdaRole",
                  "Arn"
               ]
            },
            "MemorySize":1024,
            "Timeout":30,
			"Handler": "not-required",
        "Runtime": "provided",
            "CodeUri":{ "Bucket":  { "Ref": "InboundSMSFuncBucket" },
			"Key": { "Ref": "InboundSMSFuncBucketKey"  } },
            "AutoPublishAlias":"LIVE",
            "DeploymentPreference":{
               "Enabled":true,
               "Type":{
                  "Ref":"CodeDeployRule"
               }
            },
            "VersionDescription":{
               "Fn::Sub":"${VersionDescription}"
            },
            "Description":"Function handles inbound SMS requests.",
            "Environment":{
               "Variables":{
                  "DOTNET_SHARED_STORE":"/opt/dotnetcore/store/",
                  "LAMBDA_NET_SERIALIZER_DEBUG":{
                     "Ref":"LambdaNetSerializerDebug"
                  },
                  "BUCKET":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${BucketStack}-StoryEngineBucketName"
                     }
                  },
                  "CACHESLIDINGSECONDS":{
                     "Ref":"SlidingExpirationTime"
                  },
                  "CACHETABLE":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${CacheStack}-CacheTableName"
                     }
                  },
                  "USERTABLE":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${DynamoTableStack}-UserTableName"
                     }
                  },
                  "LOGLEVEL":"Debug",
                  "MESSAGESTEPFUNCTION":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${MessageSenderStepFunctionStack}-MessageSenderStepFunctionArn"
                     }
                  },
                  "SESSIONQUEUEURL":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${QueueStack}-SessionAuditUrl"
                     }
                  },
                  "TWILIOLIVESECRETKEY":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ApiSecretsStack}-TwilioLiveSecretName"
                     }
                  },
                  "TWILIOTESTSECRETKEY":{
                     "Fn::ImportValue":{
                        "Fn::Sub":"${ApiSecretsStack}-TwilioTestSecretName"
                     }
                  }
               }
            }
         }
      },
      "InboundSmsStateMachine":{
         "Type":"AWS::StepFunctions::StateMachine",
         "Properties":{
            "RoleArn":{
               "Fn::GetAtt":[
                  "InboundSmsStateMachineRole",
                  "Arn"
               ]
            },
            "DefinitionString":
			{
               "Fn::Sub":"{ \"StartAt\": \"ProcessInboundMessage\", \"States\": { \"ProcessInboundMessage\": { \"Type\": \"Task\", \"Resource\": \"${SmsHandlerTask.Arn}:LIVE\", \"Retry\": [ { \"ErrorEquals\": [ \"Lambda.Unknown\", \"Lambda.ServiceException\", \"Lambda.SdkClientException\", \"AggregateException\" ], \"IntervalSeconds\": 2, \"MaxAttempts\": 6, \"BackoffRate\": 2 } ], \"End\": true } } }"
            }
         }
      },
      "SendSmsTaskLambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":{
               "Fn::Join":[
                  "",
                  [
                     "/",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     "/"
                  ]
               ]
            },
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "sts:AssumeRole"
                     ],
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     }
                  }
               ]
            },
            "ManagedPolicyArns":[
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${BucketStack}-BucketReaderPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${QueueStack}-SessionAuditPostPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${CacheStack}-CacheTableAccessPolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${MessageSenderStepFunctionStack}-MessageDispatcherStepFunctionPolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${DynamoTableStack}-UserTableAccessPolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${ApiSecretsStack}-TwilioLiveReaderPolicy"
                  }
               },
               "arn:aws:iam::aws:policy/service-role/AWSLambdaRole",
               "arn:aws:iam::aws:policy/AWSLambdaExecute",
               "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
            ]
         }
      },
      "InboundSmsStateMachineRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":{
               "Fn::Join":[
                  "",
                  [
                     "/",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     "/"
                  ]
               ]
            },
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":{
                           "Fn::Sub":"states.${AWS::Region}.amazonaws.com"
                        }
                     },
                     "Action":"sts:AssumeRole"
                  }
               ]
            },
            "Policies":[
               {
                  "PolicyName":"StepFunctionLambdaInvoke",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "lambda:InvokeFunction"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"${SmsHandlerTask.Arn}:LIVE"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         }
      },
      "InboundSmsRestApi":{
         "Type":"AWS::ApiGateway::RestApi",
         "Properties":{
            "Description":"Inbound Sms Rest API Stack",
            "Name":{
               "Fn::Join":[
                  "",
                  [
                     "Whetstone-InboundSmsApi-",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     }
                  ]
               ]
            },
            "ApiKeySourceType":"HEADER",
            "EndpointConfiguration":{
               "Types":[
                  "REGIONAL"
               ]
            }
         }
      },
      "ApiResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "ParentId":{
               "Fn::GetAtt":[
                  "InboundSmsRestApi",
                  "RootResourceId"
               ]
            },
            "PathPart":"api"
         }
      },
      "V1Resource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "ParentId":{
               "Ref":"ApiResource"
            },
            "PathPart":"v1"
         }
      },
      "ProcessMessageResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "ParentId":{
               "Ref":"V1Resource"
            },
            "PathPart":"processmessage"
         }
      },
	  "CallbackResource":{
         "Type":"AWS::ApiGateway::Resource",
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "ParentId":{
               "Ref":"V1Resource"
            },
            "PathPart":"statuscallback"
         }
      },
      "InboundSmsApiKey":{
         "Type":"AWS::ApiGateway::ApiKey",
         "Properties":{
            "Description":{
               "Fn::Join":[
                  "",
                  [
                     "For use with the Inboundm SMS ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API"
                  ]
               ]
            },
            "Enabled":true,
            "Name":{
               "Fn::Join":[
                  "",
                  [
                     "Inbound SMS ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API Key"
                  ]
               ]
            }
         }
      },
      "InboundSmsApiUsage":{
         "Type":"AWS::ApiGateway::UsagePlan",
         "DependsOn":[
            "InboundSmsStateMachine",
            "InboundSmsApiDeploymentProd",
            "InboundSmsApiDeploymentStage"
         ],
         "Properties":{
            "UsagePlanName":{
               "Fn::Join":[
                  "",
                  [
                     "Inbound SMS ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " Usage Plan"
                  ]
               ]
            },
            "Description":{
               "Fn::Join":[
                  "",
                  [
                     "For use with the Inbound Sms ",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     },
                     " API"
                  ]
               ]
            },
            "ApiStages":[
               {
                  "ApiId":{
                     "Fn::Sub":"${InboundSmsRestApi}"
                  },
                  "Stage":"prod"                  
                   
               },
               {
                  "ApiId":{
                     "Fn::Sub":"${InboundSmsRestApi}"
                  },
                  "Stage":"stage"
               }
            ]
         }
      },
      "InboundSmsUsagePlanKey":{
         "Type":"AWS::ApiGateway::UsagePlanKey",
         "DependsOn":[
            "InboundSmsApiKey",
            "InboundSmsApiUsage"
         ],
         "Properties":{
            "KeyType":"API_KEY",
            "KeyId":{
               "Ref":"InboundSmsApiKey"
            },
            "UsagePlanId":{
               "Ref":"InboundSmsApiUsage"
            }
         }
      },
      "InboundSmsApiDeploymentProd":{
         "Type":"AWS::ApiGateway::Deployment",
         "DependsOn":[
            "SmsPostMethod",
            "InboundSmsApiDeploymentStage"
         ],
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "Description":"RestApi production deployment",
            "StageName":"prod"
         }
      },
      "InboundSmsApiDeploymentStage":{
         "Type":"AWS::ApiGateway::Deployment",
         "DependsOn":[
            "SmsPostMethod"
         ],
         "Properties":{
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "Description":"RestApi stage deployment",
            "StageName":"stage"
         }
      },
      "SmsPostMethod":{
         "Type":"AWS::ApiGateway::Method",
         "DependsOn":[
            "SmsHandlerTask",
            "InboundSmsRestApi"
         ],
         "Properties":{
            "RequestValidatorId":{
               "Ref":"InboundSmsRequestValidator"
            },
            "AuthorizationType":"NONE",
            "OperationName":"Post Inbound SMS Request",
            "ApiKeyRequired":false,
            "ResourceId":{
               "Ref":"ProcessMessageResource"
            },
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "HttpMethod":"POST",
            "RequestParameters":{
               "method.request.querystring.alias":false,
               "method.request.header.Content-Type":true,
               "method.request.header.Host":true,
               "method.request.header.X-Twilio-Signature":true
            },
            "Integration":{
               "ConnectionType":"INTERNET",
               "IntegrationHttpMethod":"POST",
               "Type":"AWS",
               "Uri":{
                  "Fn::Sub":"arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
               },
               "PassthroughBehavior":"WHEN_NO_TEMPLATES",
               "Credentials":
			   {
                  "Fn::Sub":"arn:aws:iam::${AWS::AccountId}:role/APIGatewayToStepFunctions"
               },
               "RequestTemplates":{
                  "application/json":
				  {
				  
				  "Fn::Sub":"#foreach($param in $input.params().header.keySet())\r\n  #set($headerset = $headerset + '\"' + $param + '\": \"'+$util.escapeJavaScript($input.params().header.get($param)) + '\"')  \r\n  #if($foreach.hasNext)\r\n    #set($headerset = $headerset + \",\")\r\n  #end\r\n#end\r\n#set($inputText = '{ \"body\":\"' + $input.body + '\", \"alias\": \"' + $input.params('alias') + '\", \"path\":\"' + $context.path + '\", \"headers\": {' + $headerset  + '}}')\r\n{\r\n    \"input\":  \"$util.escapeJavaScript($inputText)\",\r\n    \"stateMachineArn\": \"${InboundSmsStateMachine}\"\r\n} "
				  
				  },
                  "application/x-www-form-urlencoded":
				  {  "Fn::Sub":"#foreach($param in $input.params().header.keySet())\r\n  #set($headerset = $headerset + '\"' + $param + '\": \"'+$util.escapeJavaScript($input.params().header.get($param)) + '\"')  \r\n  #if($foreach.hasNext)\r\n    #set($headerset = $headerset + \",\")\r\n  #end\r\n#end\r\n#set($inputText = '{  \"body\":\"' + $input.body + '\", \"alias\": \"' + $input.params('alias') + '\", \"path\":\"' + $context.path + '\", \"headers\": {' + $headerset  + '}}')\r\n{\r\n    \"input\":  \"$util.escapeJavaScript($inputText)\",\r\n    \"stateMachineArn\": \"${InboundSmsStateMachine}\"\r\n} " } 
               },
               "TimeoutInMillis":29000,
               "CacheKeyParameters":[

               ],
               "IntegrationResponses":[
                  {
                     "StatusCode":"203",
                     "ResponseParameters":{
                        "method.response.header.Cache-Control":"'no-store, must-revalidate, no-cache'",
                        "method.response.header.Content-Type":"'application/xml'",
                        "method.response.header.Expires":"'0'",
                        "method.response.header.Pragma":"'no-cache'",
                        "method.response.header.X-Content-Type-Options":"'nosniff'"
                     },
                     "SelectionPattern":"2\\d{2}",
                     "ContentHandling":"CONVERT_TO_TEXT",
                     "ResponseTemplates":{
                        "application/json":"#set($inputRoot = $input.path('$'))\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response></Response>",
                        "application/xml":"#set($inputRoot = $input.path('$'))\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response></Response>"
                     }
                  }
               ]
            },
            "MethodResponses" : [
			 {
             "StatusCode" : "203",
             "ResponseParameters" :  {
                "method.response.header.Cache-Control": false,
                "method.response.header.Content-Type": false,
                "method.response.header.Expires": false,
                "method.response.header.Pragma": false,
                "method.response.header.X-Content-Type-Options": false
            },
			"ResponseModels" :  {
                "application/json": "Empty",
                "application/xml": "Empty"
            }

			 }

			]
         }
      },
      "InboundSmsRequestValidator":{
         "Type":"AWS::ApiGateway::RequestValidator",
         "Properties":{
            "Name":{
               "Fn::Join":[
                  "",
                  [
                     "Whetstone-SmsRequestValidator-",
                     {
                        "Fn::ImportValue":{
                           "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                     }
                  ]
               ]
            },
            "RestApiId":{
               "Ref":"InboundSmsRestApi"
            },
            "ValidateRequestBody":false,
            "ValidateRequestParameters":true
         }
      }
   },
   "Outputs":{
    "SmsApiURL": {
      "Value": {
        "Fn::Sub": "https://${InboundSmsRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/api/v1/processmessage"
      }
    }
   }
}