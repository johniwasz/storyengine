{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application.",
  "Parameters": {
    "KeyStack": {
      "Description": "Name of stack used to create environment key for decryption. Example: WhetstoneKey-Dev",
      "Type": "String",
      "Default": "WhetstoneKey-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "PolicyStack": {
      "Description": "Name of stack used to create supplemental policies. Example: WhetstoneSharedPolicies-Dev",
      "Type": "String",
      "Default": "WhetstoneSharedPolicies-Dev",
      "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
    "LambdaNetSerializerDebug": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Indicates if the lambda serialization is enabled or not.",
      "Default": "false"
    },
    "VersionDescription": {
      "Type": "String",
      "Description": "Associate the deployed version with the build",
      "Default": "Out of band"
    },
    "CodeDeployRule": {
      "AllowedValues": [
        "AllAtOnce",
        "Linear10PercentEvery1Minute",
        "Linear10PercentEvery2Minutes",
        "Linear10PercentEvery3Minutes",
        "Linear10PercentEvery10Minutes",
        "Canary10Percent5Minutes",
        "Canary10Percent10Minutes"
      ],
      "Default": "Linear10PercentEvery1Minute",
      "Description": "Determine whether or not to use a blue/green deployment when pushing out this lambda",
      "Type": "String"
    },
    "CustomActionLambdaStack": {
      "Description": "Stack that defines lambdas for custom resources",
      "Type": "String",
      "Default": "Whetstone-LambdaCustomActions-Dev"
    },
    "SocketInfrastructureStack": {
        "Description": "Name of stack used to create the tables and policies for socket/notification infrastructure. Example: Whetstone-SocketInfrastructure-Dev",
        "Type": "String",
        "Default": "Whetstone-SocketInfrastructure-Dev",
        "AllowedPattern": "^[a-zA-Z]+[0-9a-zA-Z\\-]*$"
    },
        "NotificationFuncBucket": {
      "Description": "S3 Bucket of the Notification Func zip deployment",
      "Type": "String"
    },
    "NotificationFuncBucketKey": {
      "Description": "S3 Bucket key of the Notification Func zip deployment",
      "Type": "String"
    }
  },
  "Resources": {
    "KeyPolicyUpdate":{
         "Type":"AWS::CloudFormation::CustomResource",
         "DependsOn": [
         "NotificationsApiRole"
         ],
         "Properties":{
            "ServiceToken":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${CustomActionLambdaStack}-KeyPolicyUpdateArn"
               }
            },
            "Key":{
               "Fn::ImportValue":{
                  "Fn::Sub":"${KeyStack}-EnvironmentKeyArn"
               }
            },
            "RoleArn":{
               "Fn::GetAtt":[
                  "NotificationsApiRole",
                  "Arn"
               ]
            },
            "GrantType":"Decrypt"
         }
      },
    "InvokeNotificationsFunctionPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "DependsOn": [
            "NotificationsFunction"
        ],
        "DeletionPolicy": "Delete",
        "Properties": {
            "Path": {
                "Fn::Join": [
                    "",
                    [
                        "/",
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${KeyStack}-EnvironmentName"
                            }
                        },
                        "/"
                    ]
                ]
            },
            "PolicyDocument": {
                "Version":"2012-10-17",
                "Statement": {
                    "Effect": "Allow",
                    "Action": "lambda:InvokeFunction",
                    "Resource": {
                        "Fn::GetAtt":[
                            "NotificationsFunction",
                            "Arn"
                        ]
                    }
                }
            }
        }
     },
    "NotificationsApiRole":{
        "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":{
                "Fn::Join":[
                    "",
                    [
                        "/",
                        {
                        "Fn::ImportValue":{
                            "Fn::Sub":"${KeyStack}-EnvironmentName"
                        }
                        },
                        "/"
                    ]
                ]
            },
            "AssumeRolePolicyDocument":{
                "Version":"2012-10-17",
                "Statement":[
                    {
                        "Action":"sts:AssumeRole",
                        "Effect":"Allow",
                        "Principal":{
                        "Service":"lambda.amazonaws.com"
                        }
                    }
                ]
            },
            "ManagedPolicyArns":[
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${PolicyStack}-BootstrapConfigPolicy"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${SocketInfrastructureStack}-ConnectionMappingTablePolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${SocketInfrastructureStack}-PendingNotificationsTablePolicyArn"
                  }
               },
               {
                  "Fn::ImportValue":{
                     "Fn::Sub":"${SocketInfrastructureStack}-ManageSocketConnectionsPolicyArn"
                  }
               },
               "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
               "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            ]
        }
    },
    "NotificationsFunction": {
      "Type": "AWS::Serverless::Function",
      "DependsOn": [
      "NotificationsApiRole"
      ],
      "Properties": {
       	"Handler": "not-required",
        "Runtime": "provided",
        "MemorySize": 256,
        "Timeout": 30,
        "EventInvokeConfig": {
            "MaximumRetryAttempts": 0
        },
        "Role":{
            "Fn::GetAtt":[
                "NotificationsApiRole",
                "Arn"
            ]
        },
         "CodeUri":{ "Bucket":  { "Ref": "NotificationFuncBucket" },
            "Key": { "Ref": "NotificationFuncBucketKey"  } },
         "AutoPublishAlias":"LIVE",
          "DeploymentPreference":{
                "Enabled":true,
                "Type":{
                    "Ref":"CodeDeployRule"
                }
            },
            "VersionDescription":{
               "Fn::Sub":"${VersionDescription}"
            },
        "Environment": {
          "Variables": {
            "DOTNET_SHARED_STORE":"/opt/dotnetcore/store/",
            "BOOTSTRAP":{
                "Fn::ImportValue":{
                "Fn::Sub":"${PolicyStack}-BootstrapParameter"
                }
            },
            "LAMBDA_NET_SERIALIZER_DEBUG":{
                "Ref":"LambdaNetSerializerDebug"
            },
            "DBUSERTYPE":"AdminUser"
          }
        }
      }
    },
    "BootstrapConfigUpdate": {
        "Type": "AWS::CloudFormation::CustomResource",
        "DependsOn": [
        "NotificationsFunction"
        ],
        "Properties": {
            "ServiceToken": {
                "Fn::ImportValue": {
                    "Fn::Sub": "${CustomActionLambdaStack}-BootstrapConfigUpdateArn"
                }
            },
            "KeyId": {
                "Fn::ImportValue": {
                    "Fn::Sub": "${KeyStack}-EnvironmentKeyAlias"
                }
            },
            "Parameter": {
                "Fn::ImportValue": {
                    "Fn::Sub": "${PolicyStack}-BootstrapParameter"
                }
            },
            "ConfigEntries": [
                {
                    "ConfigType": "NotificationsLambdaArn",
                    "Value": {
                        "Fn::GetAtt":[
                            "NotificationsFunction",
                            "Arn"
                        ]
                    }
                },
                {
                    "ConfigType": "NotificationsLambdaName",
                    "Value": {
                        "Ref": "NotificationsFunction"
                    }
                }
            ]
        }
    }
  },  
  "Outputs": {
    "NotificationsFunctionArn": {
        "Value": {
            "Fn::GetAtt":[
                "NotificationsFunction",
                "Arn"
            ]
        },
      "Description": "Function for handling notifications."
    },
    "NotificationsFunctionName": {
        "Value": {
            "Ref": "NotificationsFunction"
        },
      "Description": "Function for handling notifications.",
        "Export": {
            "Name": {
                "Fn::Sub": "${AWS::StackName}-NotificationsFunctionName"
            }
        }
    },
    "InvokeNotificationsFunctionPolicyArn": {
        "Value": {
            "Ref": "InvokeNotificationsFunctionPolicy"
        },
      "Description": "Policy for invoking the Notifications Lambda",
        "Export": {
            "Name": {
                "Fn::Sub": "${AWS::StackName}-InvokeNotificationsFunctionPolicyArn"
            }
        }
    }
  }
}